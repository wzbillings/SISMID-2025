{
  "hash": "d3d34f92771b2d4326a7c35531f118c6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Intro To Quarto\"\nformat: revealjs\neditor: visual\n---\n\n\n\n![](images/quarto-dark-bg.jpeg){fig-align=\"center\"}\n\n## Learning objectives:\n\n-   Understand the basic components of a Quarto document.\n\n## Introduction {.unnumbered}\n\n-   Quarto is a command line interface tool, not an R package.\n\n-   Quarto unifies the functionality of many packages from the R Markdown ecosystem: rmarkdown, bookdown, distill, xaringan, etc. into a single consistent system.\n\n-   Quarto -\\> native support for multiple programming languages like Python and Julia in addition to R\n\n## Where to find help\n\n-   [Documentation](https://quarto.org/)\n\n## Why Quarto documents:\n\n-   reproducible\n\n-   support dozens of output formats: PDFs, Word files, presentations, and more.\n\n## 3 main uses:\n\n1.  Communication: focus on conclusions not code.\n2.  Collaborating with other scientists (including future you!): conclusions and code.\n3.  Environment in which to do data science.\n\n## Quarto basics {.unnumbered}\n\n-   Quarto files have `.qmd` extension.\n\n-   Contains 3 types of contents:\n\n    -   and optional YAML header surrounded by 3 dashes (---) at the beginning and end\n    -   chunks of R code surrounded by 3 back ticks (\\`\\`\\`)\n    -   text mixed with simple formatting like #heading or **italics**\n\n## Getting Started\n\n-   To get started with your own .qmd file, select File \\> New File \\> Quarto Document… in the menu bar.\n\n![](images/28-fig28.png){fig-align=\"center\"}\n\n## Run code in quarto {.unnumbered}\n\n-   Run each code chunk by clicking the Run icon (each chunk will have this green arrow).\n\n-   You can choose to have the plots and output displayed in the document or on RStudio's console and plot panes. Go to the gear icon next to \"Render\" and switch to \"Chunk Output Console\".\n\n-   To run the complete report, click \"Render\" and your report will be displayed in the viewer pane as an HTML file (unless the YAML includes .pdf or other extension).\n\n## Visual editor {.unnumbered}\n\n::::: {style=\"display: flex;\"}\n<div>\n\n-   Visual editor -\\> use the buttons on the menu bar to insert images, tables, cross-references, etc. or you can use the catch-all ⌘ + / or Ctrl + / shortcut to insert just about anything.\n-   The visual editor displays your content with formatting, but under the hood, it saves your content in plain Markdown and you can switch back and forth between the visual and source editors.\n\n</div>\n\n<div>\n\n![](images/28-quarto-visual-editor.png){fig-align=\"center\"}\n\n</div>\n:::::\n\n## Source editor {.unnumbered}\n\n::::: {style=\"display: flex;\"}\n<div>\n\n-   The Source editor will feel familiar to those with experience writing R scripts or R Markdown documents.\n-   Can also be useful for debugging any Quarto syntax errors since it’s often easier to catch these in plain text.\n-   If you forget, you can get to a handy reference sheet with Help \\> Markdown Quick Reference.\n\n</div>\n\n<div>\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n## Text formatting\n\n*italic* **bold** ~~strikeout~~ `code`\n\nsuperscript^2^ subscript~2~\n\n[underline]{.underline} [small caps]{.smallcaps}\n\n## Headings\n\n# 1st Level Header\n\n## 2nd Level Header\n\n### 3rd Level Header\n\n## Lists\n\n-   Bulleted list item 1\n\n-   Item 2\n\n    -   Item 2a\n\n    -   Item 2b\n\n1.  Numbered list item 1\n\n2.  Item 2.\n    The numbers are incremented automatically in the output.\n\n## Links and images\n\n<http://example.com>\n\n[linked phrase](http://example.com)\n\n![optional caption text](quarto.png){fig-alt=\"Quarto logo and the word quarto spelled in small case letters\"}\n\n## Tables\n\n| First Header | Second Header |\n|--------------|---------------|\n| Content Cell | Content Cell  |\n| Content Cell | Content Cell  |\n```\n\n\n:::\n:::\n\n\n\n</div>\n:::::\n\n## Code chunks {.unnumbered}\n\n-   To run code inside a Quarto document, you need to insert a chunk.\n    1.  The keyboard shortcut Cmd + Option + I / Ctrl + Alt + I.\n    2.  The “Insert” button icon in the editor toolbar.\n\n## Chunk label {.unnumbered}\n\nChunks can be given an optional label, e.g.\n\n![](images/28-chunk-label.png){fig-align=\"center\" width=\"324\"}\n\n## This has three advantages:\n\n1.  Navigate to specific chunks using the drop-down code navigator in the bottom-left of the script editor:\n\n![](images/quarto-chunk-nav.png){fig-align=\"center\"}\n\n2.  Graphics produced by the chunks will have useful names that make them easier to use elsewhere.\n\n3.  You can set up networks of cached chunks to avoid re-performing expensive computations on every run.\n\n## Important!\n\n-   Your chunk labels should be short but evocative and should not contain spaces.\n-   We recommend using dashes (`-`) to separate words (instead of underscores, `_`) and no other special characters in chunk labels.\n-   Use whatever name, except: `setup`, which is used for a specific reason.\n-   Additionally, chunk labels cannot be duplicated.\n-   Each chunk label must be unique.\n\n## Chunk options {.unnumbered}\n\n-   Chunk output can be customized with **options**.\n\n-   You can see the full list at <https://yihui.org/knitr/options.>\n\n-   Each of these chunk options get added to the header of the chunk, following `#|`.\n\n    ![](images/28-chunk-options.png){width=\"474\"}\n\n## The main options are:\n\n-   `eval: false` prevents code from being evaluated. And obviously if the code is not run, no results will be generated.\n\n-   `echo: false` prevents code, but not the results from appearing in the finished file.\n\n-   `message: false` or `warning: false` prevents messages or warnings from appearing in the finished file.\n\n-   `error: true` causes the render to continue even if code returns an error. This is rarely something you'll want to include in the final version of your report, but can be very useful to debug. The default, `error: false` causes rendering to fail if there is a single error in the document.\n\n## Inline code {.unnumbered}\n\n-   There is one other way to embed R code into a Quarto document: directly into the text, with r inside back ticks.\n    -   For example, you can inline code include in between text and that will show a result.\n\n> The data frame iris has 150 rows.\n\n## Figures {.unnumbered}\n\n-   The figures in a Quarto document can be embedded (e.g., a PNG or JPEG file) or generated as a result of a code chunk.\n\n-   It's best if plots have consistent width. To enforce this, set fig-width: 6 (6”) and fig-asp: 0.618 (the golden ratio) in the defaults. Then in individual chunks, only adjust fig-asp.\n\n-   Control the output size with out-width and set it to a percentage of the body width of the output document. We suggest to out-width: \"70%\" and fig-align: center.\n\n## Figures {.unnumbered}\n\n-   To put multiple plots in a single row, set the layout-ncol to 2 for two plots, 3 for three plots, etc. This effectively sets out-width to “50%” for each of your plots if layout-ncol is 2,\n\n-   Great [blog post](https://www.tidyverse.org/blog/2020/08/taking-control-of-plot-scaling/) by Thomas Lin Pedersen about controling plot scaling.\n\n## Tables {.unnumbered}\n\n-   You can include two types of tables in a Quarto document:\n    -   markdown tables that you create directly in your Quarto document, or\n    -   tables generated as a result of a code chunk.\n\n**More on Tables Soon :)**\n\n## YAML header {.unnumbered}\n\n-   You can control many other “whole document” settings by tweaking the parameters of the YAML header. You might wonder what YAML stands for: it’s “YAML Ain’t Markup Language\"\n-   [***Be careful with the YAML!***]{.underline}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}