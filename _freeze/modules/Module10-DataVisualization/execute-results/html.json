{
  "hash": "0ded86997ba6cc19572f0805d4e82715",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Module 10: Data Visualization\"\nformat: \n  revealjs:\n    scrollable: true\n    smaller: true\n    toc: false\n---\n\n\n## Learning Objectives\n\nAfter module 10, you should be able to:\n\n- Create Base R plots\n\n## Import data for this module\n\nLet's read in our data (again) and take a quick look.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read.csv(file = \"data/serodata.csv\") #relative path\nhead(x=df, n=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  observation_id IgG_concentration age gender     slum\n1           5772         0.3176895   2 Female Non slum\n2           8095         3.4368231   4 Female Non slum\n3           9784         0.3000000   4   Male Non slum\n```\n\n\n:::\n:::\n\n\n## Prep data\n\nCreate `age_group` three level factor variable\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$age_group <- ifelse(df$age <= 5, \"young\", \n                       ifelse(df$age<=10 & df$age>5, \"middle\", \"old\")) \ndf$age_group <- factor(df$age_group, levels=c(\"young\", \"middle\", \"old\"))\n```\n:::\n\n\nCreate `seropos` binary variable representing seropositivity if antibody concentrations are >10 IU/mL.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$seropos <- ifelse(df$IgG_concentration<10, 0, 1)\n```\n:::\n\n\n## Base R data visualizattion functions\n\nThe Base R 'graphics' package has a ton of graphics options. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(package = \"graphics\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'printr':\n  method                from     \n  knit_print.data.frame rmarkdown\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\t\tInformation on package 'graphics'\n\nDescription:\n\nPackage:            graphics\nVersion:            4.4.1\nPriority:           base\nTitle:              The R Graphics Package\nAuthor:             R Core Team and contributors worldwide\nMaintainer:         R Core Team <do-use-Contact-address@r-project.org>\nContact:            R-help mailing list <r-help@r-project.org>\nDescription:        R functions for base graphics.\nImports:            grDevices\nLicense:            Part of R 4.4.1\nNeedsCompilation:   yes\nEnhances:           vcd\nBuilt:              R 4.4.1; x86_64-apple-darwin20; 2024-06-15 17:31:38\n                    UTC; unix\n\nIndex:\n\nAxis                    Generic Function to Add an Axis to a Plot\nabline                  Add Straight Lines to a Plot\narrows                  Add Arrows to a Plot\nassocplot               Association Plots\naxTicks                 Compute Axis Tickmark Locations\naxis                    Add an Axis to a Plot\naxis.POSIXct            Date and Date-time Plotting Functions\nbarplot                 Bar Plots\nbox                     Draw a Box around a Plot\nboxplot                 Box Plots\nboxplot.matrix          Draw a Boxplot for each Column (Row) of a\n                        Matrix\nbxp                     Draw Box Plots from Summaries\ncdplot                  Conditional Density Plots\nclip                    Set Clipping Region\ncontour                 Display Contours\ncoplot                  Conditioning Plots\ncurve                   Draw Function Plots\ndotchart                Cleveland's Dot Plots\nfilled.contour          Level (Contour) Plots\nfourfoldplot            Fourfold Plots\nframe                   Create / Start a New Plot Frame\ngraphics-package        The R Graphics Package\ngrconvertX              Convert between Graphics Coordinate Systems\ngrid                    Add Grid to a Plot\nhist                    Histograms\nhist.POSIXt             Histogram of a Date or Date-Time Object\nidentify                Identify Points in a Scatter Plot\nimage                   Display a Color Image\nlayout                  Specifying Complex Plot Arrangements\nlegend                  Add Legends to Plots\nlines                   Add Connected Line Segments to a Plot\nlocator                 Graphical Input\nmatplot                 Plot Columns of Matrices\nmosaicplot              Mosaic Plots\nmtext                   Write Text into the Margins of a Plot\npairs                   Scatterplot Matrices\npanel.smooth            Simple Panel Plot\npar                     Set or Query Graphical Parameters\npersp                   Perspective Plots\npie                     Pie Charts\nplot.data.frame         Plot Method for Data Frames\nplot.default            The Default Scatterplot Function\nplot.design             Plot Univariate Effects of a Design or Model\nplot.factor             Plotting Factor Variables\nplot.formula            Formula Notation for Scatterplots\nplot.histogram          Plot Histograms\nplot.raster             Plotting Raster Images\nplot.table              Plot Methods for 'table' Objects\nplot.window             Set up World Coordinates for Graphics Window\nplot.xy                 Basic Internal Plot Function\npoints                  Add Points to a Plot\npolygon                 Polygon Drawing\npolypath                Path Drawing\nrasterImage             Draw One or More Raster Images\nrect                    Draw One or More Rectangles\nrug                     Add a Rug to a Plot\nscreen                  Creating and Controlling Multiple Screens on a\n                        Single Device\nsegments                Add Line Segments to a Plot\nsmoothScatter           Scatterplots with Smoothed Densities Color\n                        Representation\nspineplot               Spine Plots and Spinograms\nstars                   Star (Spider/Radar) Plots and Segment Diagrams\nstem                    Stem-and-Leaf Plots\nstripchart              1-D Scatter Plots\nstrwidth                Plotting Dimensions of Character Strings and\n                        Math Expressions\nsunflowerplot           Produce a Sunflower Scatter Plot\nsymbols                 Draw Symbols (Circles, Squares, Stars,\n                        Thermometers, Boxplots)\ntext                    Add Text to a Plot\ntitle                   Plot Annotation\nxinch                   Graphical Units\nxspline                 Draw an X-spline\n```\n\n\n:::\n:::\n\n\n\n\n## Base R Plotting\n\nTo make a plot you often need to specify the following features:\n\n1. Parameters\n2. Plot attributes\n3. The legend\n\n## 1. Parameters\n\nThe parameter section fixes the settings for all your plots, basically the plot options. Adding attributes via `par()` before you call the plot creates ‘global’ settings for your plot.\n\nIn the example below, we have set two commonly used optional attributes in the global plot settings.\n\n-\tThe `mfrow` specifies that we have one row and two columns of plots — that is, two plots side by side. \n-\tThe `mar` attribute is a vector of our margin widths, with the first value indicating the margin below the plot (5), the second indicating the margin to the left of the plot (5), the third, the top of the plot(4), and the fourth to the left (1).\n\n```\npar(mfrow = c(1,2), mar = c(5,5,4,1))\n```\n\n\n## 1. Parameters\n\n\n::: {.cell figwidth='100%'}\n::: {.cell-output-display}\n![](images/par.png)\n:::\n:::\n\n\n\n## Lots of parameters options\n\nHowever, there are many more parameter options that can be specified in the 'global' settings or specific to a certain plot option. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n?par\n```\n:::\n\nSet or Query Graphical Parameters\n\nDescription:\n\n     'par' can be used to set or query graphical parameters.\n     Parameters can be set by specifying them as arguments to 'par' in\n     'tag = value' form, or by passing them as a list of tagged values.\n\nUsage:\n\n     par(..., no.readonly = FALSE)\n     \n     <highlevel plot> (...., <tag> = <value>)\n     \nArguments:\n\n     ...: arguments in 'tag = value' form, a single list of tagged\n          values, or character vectors of parameter names. Supported\n          parameters are described in the 'Graphical Parameters'\n          section.\n\nno.readonly: logical; if 'TRUE' and there are no other arguments, only\n          parameters are returned which can be set by a subsequent\n          'par()' call _on the same device_.\n\nDetails:\n\n     Each device has its own set of graphical parameters.  If the\n     current device is the null device, 'par' will open a new device\n     before querying/setting parameters.  (What device is controlled by\n     'options(\"device\")'.)\n\n     Parameters are queried by giving one or more character vectors of\n     parameter names to 'par'.\n\n     'par()' (no arguments) or 'par(no.readonly = TRUE)' is used to get\n     _all_ the graphical parameters (as a named list).  Their names are\n     currently taken from the unexported variable 'graphics:::.Pars'.\n\n     _*R.O.*_ indicates _*read-only arguments*_: These may only be used\n     in queries and cannot be set.  ('\"cin\"', '\"cra\"', '\"csi\"',\n     '\"cxy\"', '\"din\"' and '\"page\"' are always read-only.)\n\n     Several parameters can only be set by a call to 'par()':\n\n        • '\"ask\"',\n\n        • '\"fig\"', '\"fin\"',\n\n        • '\"lheight\"',\n\n        • '\"mai\"', '\"mar\"', '\"mex\"', '\"mfcol\"', '\"mfrow\"', '\"mfg\"',\n\n        • '\"new\"',\n\n        • '\"oma\"', '\"omd\"', '\"omi\"',\n\n        • '\"pin\"', '\"plt\"', '\"ps\"', '\"pty\"',\n\n        • '\"usr\"',\n\n        • '\"xlog\"', '\"ylog\"',\n\n        • '\"ylbias\"'\n\n     The remaining parameters can also be set as arguments (often via\n     '...') to high-level plot functions such as 'plot.default',\n     'plot.window', 'points', 'lines', 'abline', 'axis', 'title',\n     'text', 'mtext', 'segments', 'symbols', 'arrows', 'polygon',\n     'rect', 'box', 'contour', 'filled.contour' and 'image'.  Such\n     settings will be active during the execution of the function,\n     only.  However, see the comments on 'bg', 'cex', 'col', 'lty',\n     'lwd' and 'pch' which may be taken as _arguments_ to certain plot\n     functions rather than as graphical parameters.\n\n     The meaning of 'character size' is not well-defined: this is set\n     up for the device taking 'pointsize' into account but often not\n     the actual font family in use.  Internally the corresponding pars\n     ('cra', 'cin', 'cxy' and 'csi') are used only to set the\n     inter-line spacing used to convert 'mar' and 'oma' to physical\n     margins.  (The same inter-line spacing multiplied by 'lheight' is\n     used for multi-line strings in 'text' and 'strheight'.)\n\n     Note that graphical parameters are suggestions: plotting functions\n     and devices need not make use of them (and this is particularly\n     true of non-default methods for e.g. 'plot').\n\nValue:\n\n     When parameters are set, their previous values are returned in an\n     invisible named list.  Such a list can be passed as an argument to\n     'par' to restore the parameter values.  Use 'par(no.readonly =\n     TRUE)' for the full list of parameters that can be restored.\n     However, restoring all of these is not wise: see the 'Note'\n     section.\n\n     When just one parameter is queried, the value of that parameter is\n     returned as (atomic) vector.  When two or more parameters are\n     queried, their values are returned in a list, with the list names\n     giving the parameters.\n\n     Note the inconsistency: setting one parameter returns a list, but\n     querying one parameter returns a vector.\n\nGraphical Parameters:\n\n     'adj' The value of 'adj' determines the way in which text strings\n          are justified in 'text', 'mtext' and 'title'.  A value of '0'\n          produces left-justified text, '0.5' (the default) centered\n          text and '1' right-justified text.  (Any value in [0, 1] is\n          allowed, and on most devices values outside that interval\n          will also work.)\n\n          Note that the 'adj' _argument_ of 'text' also allows 'adj =\n          c(x, y)' for different adjustment in x- and y- directions.\n          Note that whereas for 'text' it refers to positioning of text\n          about a point, for 'mtext' and 'title' it controls placement\n          within the plot or device region.\n\n     'ann' If set to 'FALSE', high-level plotting functions calling\n          'plot.default' do not annotate the plots they produce with\n          axis titles and overall titles.  The default is to do\n          annotation.\n\n     'ask' logical.  If 'TRUE' (and the R session is interactive) the\n          user is asked for input, before a new figure is drawn.  As\n          this applies to the device, it also affects output by\n          packages 'grid' and 'lattice'.  It can be set even on\n          non-screen devices but may have no effect there.\n\n          This not really a graphics parameter, and its use is\n          deprecated in favour of 'devAskNewPage'.\n\n     'bg' The color to be used for the background of the device region.\n          When called from 'par()' it also sets 'new = FALSE'. See\n          section 'Color Specification' for suitable values.  For many\n          devices the initial value is set from the 'bg' argument of\n          the device, and for the rest it is normally '\"white\"'.\n\n          Note that some graphics functions such as 'plot.default' and\n          'points' have an _argument_ of this name with a different\n          meaning.\n\n     'bty' A character string which determined the type of 'box' which\n          is drawn about plots.  If 'bty' is one of '\"o\"' (the\n          default), '\"l\"', '\"7\"', '\"c\"', '\"u\"', or '\"]\"' the resulting\n          box resembles the corresponding upper case letter.  A value\n          of '\"n\"' suppresses the box.\n\n     'cex' A numerical value giving the amount by which plotting text\n          and symbols should be magnified relative to the default.\n          This starts as '1' when a device is opened, and is reset when\n          the layout is changed, e.g. by setting 'mfrow'.\n\n          Note that some graphics functions such as 'plot.default' have\n          an _argument_ of this name which _multiplies_ this graphical\n          parameter, and some functions such as 'points' and 'text'\n          accept a vector of values which are recycled.\n\n     'cex.axis' The magnification to be used for axis annotation\n          relative to the current setting of 'cex'.\n\n     'cex.lab' The magnification to be used for x and y labels relative\n          to the current setting of 'cex'.\n\n     'cex.main' The magnification to be used for main titles relative\n          to the current setting of 'cex'.\n\n     'cex.sub' The magnification to be used for sub-titles relative to\n          the current setting of 'cex'.\n\n     'cin' _*R.O.*_; character size '(width, height)' in inches.  These\n          are the same measurements as 'cra', expressed in different\n          units.\n\n     'col' A specification for the default plotting color.  See section\n          'Color Specification'.\n\n          Some functions such as 'lines' and 'text' accept a vector of\n          values which are recycled and may be interpreted slightly\n          differently.\n\n     'col.axis' The color to be used for axis annotation.  Defaults to\n          '\"black\"'.\n\n     'col.lab' The color to be used for x and y labels.  Defaults to\n          '\"black\"'.\n\n     'col.main' The color to be used for plot main titles.  Defaults to\n          '\"black\"'.\n\n     'col.sub' The color to be used for plot sub-titles.  Defaults to\n          '\"black\"'.\n\n     'cra' _*R.O.*_; size of default character '(width, height)' in\n          'rasters' (pixels).  Some devices have no concept of pixels\n          and so assume an arbitrary pixel size, usually 1/72 inch.\n          These are the same measurements as 'cin', expressed in\n          different units.\n\n     'crt' A numerical value specifying (in degrees) how single\n          characters should be rotated.  It is unwise to expect values\n          other than multiples of 90 to work.  Compare with 'srt' which\n          does string rotation.\n\n     'csi' _*R.O.*_; height of (default-sized) characters in inches.\n          The same as 'par(\"cin\")[2]'.\n\n     'cxy' _*R.O.*_; size of default character '(width, height)' in\n          user coordinate units.  'par(\"cxy\")' is\n          'par(\"cin\")/par(\"pin\")' scaled to user coordinates.  Note\n          that 'c(strwidth(ch), strheight(ch))' for a given string 'ch'\n          is usually much more precise.\n\n     'din' _*R.O.*_; the device dimensions, '(width, height)', in\n          inches.  See also 'dev.size', which is updated immediately\n          when an on-screen device windows is re-sized.\n\n     'err' (_Unimplemented_; R is silent when points outside the plot\n          region are _not_ plotted.)  The degree of error reporting\n          desired.\n\n     'family' The name of a font family for drawing text.  The maximum\n          allowed length is 200 bytes.  This name gets mapped by each\n          graphics device to a device-specific font description.  The\n          default value is '\"\"' which means that the default device\n          fonts will be used (and what those are should be listed on\n          the help page for the device).  Standard values are\n          '\"serif\"', '\"sans\"' and '\"mono\"', and the Hershey font\n          families are also available.  (Devices may define others, and\n          some devices will ignore this setting completely.  Names\n          starting with '\"Hershey\"' are treated specially and should\n          only be used for the built-in Hershey font families.)  This\n          can be specified inline for 'text'.\n\n     'fg' The color to be used for the foreground of plots.  This is\n          the default color used for things like axes and boxes around\n          plots.  When called from 'par()' this also sets parameter\n          'col' to the same value.  See section 'Color Specification'.\n          A few devices have an argument to set the initial value,\n          which is otherwise '\"black\"'.\n\n     'fig' A numerical vector of the form 'c(x1, x2, y1, y2)' which\n          gives the (NDC) coordinates of the figure region in the\n          display region of the device. If you set this, unlike S, you\n          start a new plot, so to add to an existing plot use 'new =\n          TRUE' as well.\n\n     'fin' The figure region dimensions, '(width, height)', in inches.\n          If you set this, unlike S, you start a new plot.\n\n     'font' An integer which specifies which font to use for text.  If\n          possible, device drivers arrange so that 1 corresponds to\n          plain text (the default), 2 to bold face, 3 to italic and 4\n          to bold italic.  Also, font 5 is expected to be the symbol\n          font, in Adobe symbol encoding.  On some devices font\n          families can be selected by 'family' to choose different sets\n          of 5 fonts.\n\n     'font.axis' The font to be used for axis annotation.\n\n     'font.lab' The font to be used for x and y labels.\n\n     'font.main' The font to be used for plot main titles.\n\n     'font.sub' The font to be used for plot sub-titles.\n\n     'lab' A numerical vector of the form 'c(x, y, len)' which modifies\n          the default way that axes are annotated.  The values of 'x'\n          and 'y' give the (approximate) number of tickmarks on the x\n          and y axes and 'len' specifies the label length.  The default\n          is 'c(5, 5, 7)'.  'len' _is unimplemented_ in R.\n\n     'las' numeric in {0,1,2,3}; the style of axis labels.\n\n          0: always parallel to the axis [_default_],\n\n          1: always horizontal,\n\n          2: always perpendicular to the axis,\n\n          3: always vertical.\n\n          Also supported by 'mtext'.  Note that string/character\n          rotation _via_ argument 'srt' to 'par' does _not_ affect the\n          axis labels.\n\n     'lend' The line end style.  This can be specified as an integer or\n          string:\n\n          '0' and '\"round\"' mean rounded line caps [_default_];\n\n          '1' and '\"butt\"' mean butt line caps;\n\n          '2' and '\"square\"' mean square line caps.\n\n     'lheight' The line height multiplier.  The height of a line of\n          text (used to vertically space multi-line text) is found by\n          multiplying the character height both by the current\n          character expansion and by the line height multiplier.\n          Default value is 1.  Used in 'text' and 'strheight'.\n\n     'ljoin' The line join style.  This can be specified as an integer\n          or string:\n\n          '0' and '\"round\"' mean rounded line joins [_default_];\n\n          '1' and '\"mitre\"' mean mitred line joins;\n\n          '2' and '\"bevel\"' mean bevelled line joins.\n\n     'lmitre' The line mitre limit.  This controls when mitred line\n          joins are automatically converted into bevelled line joins.\n          The value must be larger than 1 and the default is 10.  Not\n          all devices will honour this setting.\n\n     'lty' The line type.  Line types can either be specified as an\n          integer (0=blank, 1=solid (default), 2=dashed, 3=dotted,\n          4=dotdash, 5=longdash, 6=twodash) or as one of the character\n          strings '\"blank\"', '\"solid\"', '\"dashed\"', '\"dotted\"',\n          '\"dotdash\"', '\"longdash\"', or '\"twodash\"', where '\"blank\"'\n          uses 'invisible lines' (i.e., does not draw them).\n\n          Alternatively, a string of up to 8 characters (from 'c(1:9,\n          \"A\":\"F\")') may be given, giving the length of line segments\n          which are alternatively drawn and skipped.  See section 'Line\n          Type Specification'.\n\n          Functions such as 'lines' and 'segments' accept a vector of\n          values which are recycled.\n\n     'lwd' The line width, a _positive_ number, defaulting to '1'.  The\n          interpretation is device-specific, and some devices do not\n          implement line widths less than one.  (See the help on the\n          device for details of the interpretation.)\n\n          Functions such as 'lines' and 'segments' accept a vector of\n          values which are recycled: in such uses lines corresponding\n          to values 'NA' or 'NaN' are omitted.  The interpretation of\n          '0' is device-specific.\n\n     'mai' A numerical vector of the form 'c(bottom, left, top, right)'\n          which gives the margin size specified in inches.\n\n     'mar' A numerical vector of the form 'c(bottom, left, top, right)'\n          which gives the number of lines of margin to be specified on\n          the four sides of the plot.  The default is 'c(5, 4, 4, 2) +\n          0.1'.\n\n     'mex' 'mex' is a character size expansion factor which is used to\n          describe coordinates in the margins of plots. Note that this\n          does not change the font size, rather specifies the size of\n          font (as a multiple of 'csi') used to convert between 'mar'\n          and 'mai', and between 'oma' and 'omi'.\n\n          This starts as '1' when the device is opened, and is reset\n          when the layout is changed (alongside resetting 'cex').\n\n     'mfcol, mfrow' A vector of the form 'c(nr, nc)'.  Subsequent\n          figures will be drawn in an 'nr'-by-'nc' array on the device\n          by _columns_ ('mfcol'), or _rows_ ('mfrow'), respectively.\n\n          In a layout with exactly two rows and columns the base value\n          of '\"cex\"' is reduced by a factor of 0.83: if there are three\n          or more of either rows or columns, the reduction factor is\n          0.66.\n\n          Setting a layout resets the base value of 'cex' and that of\n          'mex' to '1'.\n\n          If either of these is queried it will give the current\n          layout, so querying cannot tell you the order in which the\n          array will be filled.\n\n          Consider the alternatives, 'layout' and 'split.screen'.\n\n     'mfg' A numerical vector of the form 'c(i, j)' where 'i' and 'j'\n          indicate which figure in an array of figures is to be drawn\n          next (if setting) or is being drawn (if enquiring).  The\n          array must already have been set by 'mfcol' or 'mfrow'.\n\n          For compatibility with S, the form 'c(i, j, nr, nc)' is also\n          accepted, when 'nr' and 'nc' should be the current number of\n          rows and number of columns.  Mismatches will be ignored, with\n          a warning.\n\n     'mgp' The margin line (in 'mex' units) for the axis title, axis\n          labels and axis line.  Note that 'mgp[1]' affects 'title'\n          whereas 'mgp[2:3]' affect 'axis'.  The default is 'c(3, 1,\n          0)'.\n\n     'mkh' The height in inches of symbols to be drawn when the value\n          of 'pch' is an integer. _Completely ignored in R_.\n\n     'new' logical, defaulting to 'FALSE'.  If set to 'TRUE', the next\n          high-level plotting command (actually 'plot.new') should _not\n          clean_ the frame before drawing _as if it were on a *_new_*\n          device_.  It is an error (ignored with a warning) to try to\n          use 'new = TRUE' on a device that does not currently contain\n          a high-level plot.\n\n     'oma' A vector of the form 'c(bottom, left, top, right)' giving\n          the size of the outer margins in lines of text.\n\n     'omd' A vector of the form 'c(x1, x2, y1, y2)' giving the region\n          _inside_ outer margins in NDC (= normalized device\n          coordinates), i.e., as a fraction (in [0, 1]) of the device\n          region.\n\n     'omi' A vector of the form 'c(bottom, left, top, right)' giving\n          the size of the outer margins in inches.\n\n     'page' _*R.O.*_; A boolean value indicating whether the next call\n          to 'plot.new' is going to start a new page.  This value may\n          be 'FALSE' if there are multiple figures on the page.\n\n     'pch' Either an integer specifying a symbol or a single character\n          to be used as the default in plotting points.  See 'points'\n          for possible values and their interpretation.  Note that only\n          integers and single-character strings can be set as a\n          graphics parameter (and not 'NA' nor 'NULL').\n\n          Some functions such as 'points' accept a vector of values\n          which are recycled.\n\n     'pin' The current plot dimensions, '(width, height)', in inches.\n\n     'plt' A vector of the form 'c(x1, x2, y1, y2)' giving the\n          coordinates of the plot region as fractions of the current\n          figure region.\n\n     'ps' integer; the point size of text (but not symbols).  Unlike\n          the 'pointsize' argument of most devices, this does not\n          change the relationship between 'mar' and 'mai' (nor 'oma'\n          and 'omi').\n\n          What is meant by 'point size' is device-specific, but most\n          devices mean a multiple of 1bp, that is 1/72 of an inch.\n\n     'pty' A character specifying the type of plot region to be used;\n          '\"s\"' generates a square plotting region and '\"m\"' generates\n          the maximal plotting region.\n\n     'smo' (_Unimplemented_) a value which indicates how smooth circles\n          and circular arcs should be.\n\n     'srt' The string rotation in degrees.  See the comment about\n          'crt'.  Only supported by 'text'.\n\n     'tck' The length of tick marks as a fraction of the smaller of the\n          width or height of the plotting region.  If 'tck >= 0.5' it\n          is interpreted as a fraction of the relevant side, so if 'tck\n          = 1' grid lines are drawn.  The default setting ('tck = NA')\n          is to use 'tcl = -0.5'.\n\n     'tcl' The length of tick marks as a fraction of the height of a\n          line of text.  The default value is '-0.5'; setting 'tcl =\n          NA' sets 'tck = -0.01' which is S' default.\n\n     'usr' A vector of the form 'c(x1, x2, y1, y2)' giving the extremes\n          of the user coordinates of the plotting region.  When a\n          logarithmic scale is in use (i.e., 'par(\"xlog\")' is true, see\n          below), then the x-limits will be '10 ^ par(\"usr\")[1:2]'.\n          Similarly for the y-axis.\n\n     'xaxp' A vector of the form 'c(x1, x2, n)' giving the coordinates\n          of the extreme tick marks and the number of intervals between\n          tick-marks when 'par(\"xlog\")' is false.  Otherwise, when\n          _log_ coordinates are active, the three values have a\n          different meaning: For a small range, 'n' is _negative_, and\n          the ticks are as in the linear case, otherwise, 'n' is in\n          '1:3', specifying a case number, and 'x1' and 'x2' are the\n          lowest and highest power of 10 inside the user coordinates,\n          '10 ^ par(\"usr\")[1:2]'. (The '\"usr\"' coordinates are\n          log10-transformed here!)\n\n          n = 1 will produce tick marks at 10^j for integer j,\n\n          n = 2 gives marks k 10^j with k in {1,5},\n\n          n = 3 gives marks k 10^j with k in {1,2,5}.\n\n          See 'axTicks()' for a pure R implementation of this.\n\n          This parameter is reset when a user coordinate system is set\n          up, for example by starting a new page or by calling\n          'plot.window' or setting 'par(\"usr\")': 'n' is taken from\n          'par(\"lab\")'.  It affects the default behaviour of subsequent\n          calls to 'axis' for sides 1 or 3.\n\n          It is only relevant to default numeric axis systems, and not\n          for example to dates.\n\n     'xaxs' The style of axis interval calculation to be used for the\n          x-axis.  Possible values are '\"r\"', '\"i\"', '\"e\"', '\"s\"',\n          '\"d\"'.  The styles are generally controlled by the range of\n          data or 'xlim', if given.\n          Style '\"r\"' (regular) first extends the data range by 4\n          percent at each end and then finds an axis with pretty labels\n          that fits within the extended range.\n          Style '\"i\"' (internal) just finds an axis with pretty labels\n          that fits within the original data range.\n          Style '\"s\"' (standard) finds an axis with pretty labels\n          within which the original data range fits.\n          Style '\"e\"' (extended) is like style '\"s\"', except that it is\n          also ensures that there is room for plotting symbols within\n          the bounding box.\n          Style '\"d\"' (direct) specifies that the current axis should\n          be used on subsequent plots.\n          (_Only '\"r\"' and '\"i\"' styles have been implemented in R._)\n\n     'xaxt' A character which specifies the x axis type.  Specifying\n          '\"n\"' suppresses plotting of the axis.  The standard value is\n          '\"s\"': for compatibility with S values '\"l\"' and '\"t\"' are\n          accepted but are equivalent to '\"s\"': any value other than\n          '\"n\"' implies plotting.\n\n     'xlog' A logical value (see 'log' in 'plot.default').  If 'TRUE',\n          a logarithmic scale is in use (e.g., after 'plot(*, log =\n          \"x\")').  For a new device, it defaults to 'FALSE', i.e.,\n          linear scale.\n\n     'xpd' A logical value or 'NA'.  If 'FALSE', all plotting is\n          clipped to the plot region, if 'TRUE', all plotting is\n          clipped to the figure region, and if 'NA', all plotting is\n          clipped to the device region.  See also 'clip'.\n\n     'yaxp' A vector of the form 'c(y1, y2, n)' giving the coordinates\n          of the extreme tick marks and the number of intervals between\n          tick-marks unless for log coordinates, see 'xaxp' above.\n\n     'yaxs' The style of axis interval calculation to be used for the\n          y-axis.  See 'xaxs' above.\n\n     'yaxt' A character which specifies the y axis type.  Specifying\n          '\"n\"' suppresses plotting.\n\n     'ylbias' A positive real value used in the positioning of text in\n          the margins by 'axis' and 'mtext'.  The default is in\n          principle device-specific, but currently '0.2' for all of R's\n          own devices.  Set this to '0.2' for compatibility with R <\n          2.14.0 on 'x11' and 'windows()' devices.\n\n     'ylog' A logical value; see 'xlog' above.\n\nColor Specification:\n\n     Colors can be specified in several different ways. The simplest\n     way is with a character string giving the color name (e.g.,\n     '\"red\"').  A list of the possible colors can be obtained with the\n     function 'colors'.  Alternatively, colors can be specified\n     directly in terms of their RGB components with a string of the\n     form '\"#RRGGBB\"' where each of the pairs 'RR', 'GG', 'BB' consist\n     of two hexadecimal digits giving a value in the range '00' to\n     'FF'.  Hexadecimal colors can be in the long hexadecimal form\n     (e.g., '\"#rrggbb\"' or '\"#rrggbbaa\"') or the short form (e.g,\n     '\"#rgb\"' or '\"#rgba\"'). The short form is expanded to the long\n     form by replicating digits (not by adding zeroes), e.g., '\"#rgb\"'\n     becomes '\"#rrggbb\"'. Colors can also be specified by giving an\n     index into a small table of colors, the 'palette': indices wrap\n     round so with the default palette of size 8, '10' is the same as\n     '2'.  This provides compatibility with S.  Index '0' corresponds\n     to the background color.  Note that the palette (apart from '0'\n     which is per-device) is a per-session setting.\n\n     Negative integer colours are errors.\n\n     Additionally, '\"transparent\"' is _transparent_, useful for filled\n     areas (such as the background!), and just invisible for things\n     like lines or text.  In most circumstances (integer) 'NA' is\n     equivalent to '\"transparent\"' (but not for 'text' and 'mtext').\n\n     Semi-transparent colors are available for use on devices that\n     support them.\n\n     The functions 'rgb', 'hsv', 'hcl', 'gray' and 'rainbow' provide\n     additional ways of generating colors.\n\nLine Type Specification:\n\n     Line types can either be specified by giving an index into a small\n     built-in table of line types (1 = solid, 2 = dashed, etc, see\n     'lty' above) or directly as the lengths of on/off stretches of\n     line.  This is done with a string of an even number (up to eight)\n     of characters, namely _non-zero_ (hexadecimal) digits which give\n     the lengths in consecutive positions in the string.  For example,\n     the string '\"33\"' specifies three units on followed by three off\n     and '\"3313\"' specifies three units on followed by three off\n     followed by one on and finally three off.  The 'units' here are\n     (on most devices) proportional to 'lwd', and with 'lwd = 1' are in\n     pixels or points or 1/96 inch.\n\n     The five standard dash-dot line types ('lty = 2:6') correspond to\n     'c(\"44\", \"13\", \"1343\", \"73\", \"2262\")'.\n\n     Note that 'NA' is not a valid value for 'lty'.\n\nNote:\n\n     The effect of restoring all the (settable) graphics parameters as\n     in the examples is hard to predict if the device has been resized.\n     Several of them are attempting to set the same things in different\n     ways, and those last in the alphabet will win.  In particular, the\n     settings of 'mai', 'mar', 'pin', 'plt' and 'pty' interact, as do\n     the outer margin settings, the figure layout and figure region\n     size.\n\nReferences:\n\n     Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) _The New S\n     Language_.  Wadsworth & Brooks/Cole.\n\n     Murrell, P. (2005) _R Graphics_. Chapman & Hall/CRC Press.\n\nSee Also:\n\n     'plot.default' for some high-level plotting parameters; 'colors';\n     'clip'; 'options' for other setup parameters; graphic devices\n     'x11', 'pdf', 'postscript' and setting up device regions by\n     'layout' and 'split.screen'.\n\nExamples:\n\n     op <- par(mfrow = c(2, 2), # 2 x 2 pictures on one plot\n               pty = \"s\")       # square plotting region,\n                                # independent of device size\n     \n     ## At end of plotting, reset to previous settings:\n     par(op)\n     \n     ## Alternatively,\n     op <- par(no.readonly = TRUE) # the whole list of settable par's.\n     ## do lots of plotting and par(.) calls, then reset:\n     par(op)\n     ## Note this is not in general good practice\n     \n     par(\"ylog\") # FALSE\n     plot(1 : 12, log = \"y\")\n     par(\"ylog\") # TRUE\n     \n     plot(1:2, xaxs = \"i\") # 'inner axis' w/o extra space\n     par(c(\"usr\", \"xaxp\"))\n     \n     ( nr.prof <-\n     c(prof.pilots = 16, lawyers = 11, farmers = 10, salesmen = 9, physicians = 9,\n       mechanics = 6, policemen = 6, managers = 6, engineers = 5, teachers = 4,\n       housewives = 3, students = 3, armed.forces = 1))\n     par(las = 3)\n     barplot(rbind(nr.prof)) # R 0.63.2: shows alignment problem\n     par(las = 0)  # reset to default\n     \n     require(grDevices) # for gray\n     ## 'fg' use:\n     plot(1:12, type = \"b\", main = \"'fg' : axes, ticks and box in gray\",\n          fg = gray(0.7), bty = \"7\" , sub = R.version.string)\n     \n     ex <- function() {\n        old.par <- par(no.readonly = TRUE) # all par settings which\n                                           # could be changed.\n        on.exit(par(old.par))\n        ## ...\n        ## ... do lots of par() settings and plots\n        ## ...\n        invisible() #-- now,  par(old.par)  will be executed\n     }\n     ex()\n     \n     ## Line types\n     showLty <- function(ltys, xoff = 0, ...) {\n        stopifnot((n <- length(ltys)) >= 1)\n        op <- par(mar = rep(.5,4)); on.exit(par(op))\n        plot(0:1, 0:1, type = \"n\", axes = FALSE, ann = FALSE)\n        y <- (n:1)/(n+1)\n        clty <- as.character(ltys)\n        mytext <- function(x, y, txt)\n           text(x, y, txt, adj = c(0, -.3), cex = 0.8, ...)\n        abline(h = y, lty = ltys, ...); mytext(xoff, y, clty)\n        y <- y - 1/(3*(n+1))\n        abline(h = y, lty = ltys, lwd = 2, ...)\n        mytext(1/8+xoff, y, paste(clty,\" lwd = 2\"))\n     }\n     showLty(c(\"solid\", \"dashed\", \"dotted\", \"dotdash\", \"longdash\", \"twodash\"))\n     par(new = TRUE)  # the same:\n     showLty(c(\"solid\", \"44\", \"13\", \"1343\", \"73\", \"2262\"), xoff = .2, col = 2)\n     showLty(c(\"11\", \"22\", \"33\", \"44\",   \"12\", \"13\", \"14\",   \"21\", \"31\"))\n\n\n## Common parameter options\n\nEight useful parameter arguments help improve the readability of the plot:\n\n- `xlab`: specifies the x-axis label of the plot\n- `ylab`: specifies the y-axis label\n- `main`: titles your graph\n- `pch`: specifies the symbology of your graph\n- `lty`: specifies the line type of your graph\n- `lwd`: specifies line thickness\n-\t`cex` : specifies size\n- `col`: specifies the colors for your graph.\n\nWe will explore use of these arguments below.\n\n## Common parameter options\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/atrributes.png){width=200%}\n:::\n:::\n\n\n\n## 2. Plot Attributes\n\nPlot attributes are those that map your data to the plot. This mean this is where you specify what variables in the data frame you want to plot. \n\nWe will only look at four types of plots today:\n\n- `hist()` displays histogram of one variable\n- `plot()` displays x-y plot of two variables\n- `boxplot()` displays boxplot \n- `barplot()` displays barplot\n\n\n## `hist()` Help File\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?hist\n```\n:::\n\nHistograms\n\nDescription:\n\n     The generic function 'hist' computes a histogram of the given data\n     values.  If 'plot = TRUE', the resulting object of class\n     '\"histogram\"' is plotted by 'plot.histogram', before it is\n     returned.\n\nUsage:\n\n     hist(x, ...)\n     \n     ## Default S3 method:\n     hist(x, breaks = \"Sturges\",\n          freq = NULL, probability = !freq,\n          include.lowest = TRUE, right = TRUE, fuzz = 1e-7,\n          density = NULL, angle = 45, col = \"lightgray\", border = NULL,\n          main = paste(\"Histogram of\" , xname),\n          xlim = range(breaks), ylim = NULL,\n          xlab = xname, ylab,\n          axes = TRUE, plot = TRUE, labels = FALSE,\n          nclass = NULL, warn.unused = TRUE, ...)\n     \nArguments:\n\n       x: a vector of values for which the histogram is desired.\n\n  breaks: one of:\n\n            • a vector giving the breakpoints between histogram cells,\n\n            • a function to compute the vector of breakpoints,\n\n            • a single number giving the number of cells for the\n              histogram,\n\n            • a character string naming an algorithm to compute the\n              number of cells (see 'Details'),\n\n            • a function to compute the number of cells.\n\n          In the last three cases the number is a suggestion only; as\n          the breakpoints will be set to 'pretty' values, the number is\n          limited to '1e6' (with a warning if it was larger).  If\n          'breaks' is a function, the 'x' vector is supplied to it as\n          the only argument (and the number of breaks is only limited\n          by the amount of available memory).\n\n    freq: logical; if 'TRUE', the histogram graphic is a representation\n          of frequencies, the 'counts' component of the result; if\n          'FALSE', probability densities, component 'density', are\n          plotted (so that the histogram has a total area of one).\n          Defaults to 'TRUE' _if and only if_ 'breaks' are equidistant\n          (and 'probability' is not specified).\n\nprobability: an _alias_ for '!freq', for S compatibility.\n\ninclude.lowest: logical; if 'TRUE', an 'x[i]' equal to the 'breaks'\n          value will be included in the first (or last, for 'right =\n          FALSE') bar.  This will be ignored (with a warning) unless\n          'breaks' is a vector.\n\n   right: logical; if 'TRUE', the histogram cells are right-closed\n          (left open) intervals.\n\n    fuzz: non-negative number, for the case when the data is \"pretty\"\n          and some observations 'x[.]' are close but not exactly on a\n          'break'.  For counting fuzzy breaks proportional to 'fuzz'\n          are used.  The default is occasionally suboptimal.\n\n density: the density of shading lines, in lines per inch.  The default\n          value of 'NULL' means that no shading lines are drawn.\n          Non-positive values of 'density' also inhibit the drawing of\n          shading lines.\n\n   angle: the slope of shading lines, given as an angle in degrees\n          (counter-clockwise).\n\n     col: a colour to be used to fill the bars.\n\n  border: the color of the border around the bars.  The default is to\n          use the standard foreground color.\n\nmain, xlab, ylab: main title and axis labels: these arguments to\n          'title()' get \"smart\" defaults here, e.g., the default 'ylab'\n          is '\"Frequency\"' iff 'freq' is true.\n\nxlim, ylim: the range of x and y values with sensible defaults.  Note\n          that 'xlim' is _not_ used to define the histogram (breaks),\n          but only for plotting (when 'plot = TRUE').\n\n    axes: logical.  If 'TRUE' (default), axes are draw if the plot is\n          drawn.\n\n    plot: logical.  If 'TRUE' (default), a histogram is plotted,\n          otherwise a list of breaks and counts is returned.  In the\n          latter case, a warning is used if (typically graphical)\n          arguments are specified that only apply to the 'plot = TRUE'\n          case.\n\n  labels: logical or character string.  Additionally draw labels on top\n          of bars, if not 'FALSE'; see 'plot.histogram'.\n\n  nclass: numeric (integer).  For S(-PLUS) compatibility only, 'nclass'\n          is equivalent to 'breaks' for a scalar or character argument.\n\nwarn.unused: logical.  If 'plot = FALSE' and 'warn.unused = TRUE', a\n          warning will be issued when graphical parameters are passed\n          to 'hist.default()'.\n\n     ...: further arguments and graphical parameters passed to\n          'plot.histogram' and thence to 'title' and 'axis' (if 'plot =\n          TRUE').\n\nDetails:\n\n     The definition of _histogram_ differs by source (with\n     country-specific biases).  R's default with equispaced breaks\n     (also the default) is to plot the counts in the cells defined by\n     'breaks'.  Thus the height of a rectangle is proportional to the\n     number of points falling into the cell, as is the area _provided_\n     the breaks are equally-spaced.\n\n     The default with non-equispaced breaks is to give a plot of area\n     one, in which the _area_ of the rectangles is the fraction of the\n     data points falling in the cells.\n\n     If 'right = TRUE' (default), the histogram cells are intervals of\n     the form (a, b], i.e., they include their right-hand endpoint, but\n     not their left one, with the exception of the first cell when\n     'include.lowest' is 'TRUE'.\n\n     For 'right = FALSE', the intervals are of the form [a, b), and\n     'include.lowest' means '_include highest_'.\n\n     A numerical tolerance of 1e-7 times the median bin size (for more\n     than four bins, otherwise the median is substituted) is applied\n     when counting entries on the edges of bins.  This is not included\n     in the reported 'breaks' nor in the calculation of 'density'.\n\n     The default for 'breaks' is '\"Sturges\"': see 'nclass.Sturges'.\n     Other names for which algorithms are supplied are '\"Scott\"' and\n     '\"FD\"' / '\"Freedman-Diaconis\"' (with corresponding functions\n     'nclass.scott' and 'nclass.FD').  Case is ignored and partial\n     matching is used.  Alternatively, a function can be supplied which\n     will compute the intended number of breaks or the actual\n     breakpoints as a function of 'x'.\n\nValue:\n\n     an object of class '\"histogram\"' which is a list with components:\n\n  breaks: the n+1 cell boundaries (= 'breaks' if that was a vector).\n          These are the nominal breaks, not with the boundary fuzz.\n\n  counts: n integers; for each cell, the number of 'x[]' inside.\n\n density: values f^(x[i]), as estimated density values. If\n          'all(diff(breaks) == 1)', they are the relative frequencies\n          'counts/n' and in general satisfy sum[i; f^(x[i])\n          (b[i+1]-b[i])] = 1, where b[i] = 'breaks[i]'.\n\n    mids: the n cell midpoints.\n\n   xname: a character string with the actual 'x' argument name.\n\nequidist: logical, indicating if the distances between 'breaks' are all\n          the same.\n\nReferences:\n\n     Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) _The New S\n     Language_.  Wadsworth & Brooks/Cole.\n\n     Venables, W. N. and Ripley. B. D. (2002) _Modern Applied\n     Statistics with S_.  Springer.\n\nSee Also:\n\n     'nclass.Sturges', 'stem', 'density', 'truehist' in package 'MASS'.\n\n     Typical plots with vertical bars are _not_ histograms.  Consider\n     'barplot' or 'plot(*, type = \"h\")' for such bar plots.\n\nExamples:\n\n     op <- par(mfrow = c(2, 2))\n     hist(islands)\n     utils::str(hist(islands, col = \"gray\", labels = TRUE))\n     \n     hist(sqrt(islands), breaks = 12, col = \"lightblue\", border = \"pink\")\n     ##-- For non-equidistant breaks, counts should NOT be graphed unscaled:\n     r <- hist(sqrt(islands), breaks = c(4*0:5, 10*3:5, 70, 100, 140),\n               col = \"blue1\")\n     text(r$mids, r$density, r$counts, adj = c(.5, -.5), col = \"blue3\")\n     sapply(r[2:3], sum)\n     sum(r$density * diff(r$breaks)) # == 1\n     lines(r, lty = 3, border = \"purple\") # -> lines.histogram(*)\n     par(op)\n     \n     require(utils) # for str\n     str(hist(islands, breaks = 12, plot =  FALSE)) #-> 10 (~= 12) breaks\n     str(hist(islands, breaks = c(12,20,36,80,200,1000,17000), plot = FALSE))\n     \n     hist(islands, breaks = c(12,20,36,80,200,1000,17000), freq = TRUE,\n          main = \"WRONG histogram\") # and warning\n     \n     ## Extreme outliers; the \"FD\" rule would take very large number of 'breaks':\n     XXL <- c(1:9, c(-1,1)*1e300)\n     hh <- hist(XXL, \"FD\") # did not work in R <= 3.4.1; now gives warning\n     ## pretty() determines how many counts are used (platform dependently!):\n     length(hh$breaks) ## typically 1 million -- though 1e6 was \"a suggestion only\"\n     \n     ## R >= 4.2.0: no \"*.5\" labels on y-axis:\n     hist(c(2,3,3,5,5,6,6,6,7))\n     \n     require(stats)\n     set.seed(14)\n     x <- rchisq(100, df = 4)\n     \n     ## Histogram with custom x-axis:\n     hist(x, xaxt = \"n\")\n     axis(1, at = 0:17)\n     \n     \n     ## Comparing data with a model distribution should be done with qqplot()!\n     qqplot(x, qchisq(ppoints(x), df = 4)); abline(0, 1, col = 2, lty = 2)\n     \n     ## if you really insist on using hist() ... :\n     hist(x, freq = FALSE, ylim = c(0, 0.2))\n     curve(dchisq(x, df = 4), col = 2, lty = 2, lwd = 2, add = TRUE)\n\n\n## `hist()` example\n\nReminder function signature\n```\nhist(x, breaks = \"Sturges\",\n     freq = NULL, probability = !freq,\n     include.lowest = TRUE, right = TRUE, fuzz = 1e-7,\n     density = NULL, angle = 45, col = \"lightgray\", border = NULL,\n     main = paste(\"Histogram of\" , xname),\n     xlim = range(breaks), ylim = NULL,\n     xlab = xname, ylab,\n     axes = TRUE, plot = TRUE, labels = FALSE,\n     nclass = NULL, warn.unused = TRUE, ...)\n```\n\nLet's practice\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(df$age)\n```\n\n::: {.cell-output-display}\n![](Module10-DataVisualization_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n\n```{.r .cell-code}\nhist(\n\tdf$age, \n\tfreq=FALSE, \n\tmain=\"Histogram\", \n\txlab=\"Age (years)\"\n\t)\n```\n\n::: {.cell-output-display}\n![](Module10-DataVisualization_files/figure-revealjs/unnamed-chunk-12-2.png){width=960}\n:::\n:::\n\n\n\n## `plot()` Help File\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?plot\n```\n:::\n\nGeneric X-Y Plotting\n\nDescription:\n\n     Generic function for plotting of R objects.\n\n     For simple scatter plots, 'plot.default' will be used.  However,\n     there are 'plot' methods for many R objects, including\n     'function's, 'data.frame's, 'density' objects, etc.  Use\n     'methods(plot)' and the documentation for these. Most of these\n     methods are implemented using traditional graphics (the 'graphics'\n     package), but this is not mandatory.\n\n     For more details about graphical parameter arguments used by\n     traditional graphics, see 'par'.\n\nUsage:\n\n     plot(x, y, ...)\n     \nArguments:\n\n       x: the coordinates of points in the plot. Alternatively, a\n          single plotting structure, function or _any R object with a\n          'plot' method_ can be provided.\n\n       y: the y coordinates of points in the plot, _optional_ if 'x' is\n          an appropriate structure.\n\n     ...: arguments to be passed to methods, such as graphical\n          parameters (see 'par').  Many methods will accept the\n          following arguments:\n\n          'type' what type of plot should be drawn.  Possible types are\n\n                • '\"p\"' for *p*oints,\n\n                • '\"l\"' for *l*ines,\n\n                • '\"b\"' for *b*oth,\n\n                • '\"c\"' for the lines part alone of '\"b\"',\n\n                • '\"o\"' for both '*o*verplotted',\n\n                • '\"h\"' for '*h*istogram' like (or 'high-density')\n                  vertical lines,\n\n                • '\"s\"' for stair *s*teps,\n\n                • '\"S\"' for other *s*teps, see 'Details' below,\n\n                • '\"n\"' for no plotting.\n\n              All other 'type's give a warning or an error; using,\n              e.g., 'type = \"punkte\"' being equivalent to 'type = \"p\"'\n              for S compatibility.  Note that some methods, e.g.\n              'plot.factor', do not accept this.\n\n          'main' an overall title for the plot: see 'title'.\n\n          'sub' a subtitle for the plot: see 'title'.\n\n          'xlab' a title for the x axis: see 'title'.\n\n          'ylab' a title for the y axis: see 'title'.\n\n          'asp' the y/x aspect ratio, see 'plot.window'.\n\nDetails:\n\n     The two step types differ in their x-y preference: Going from\n     (x1,y1) to (x2,y2) with x1 < x2, 'type = \"s\"' moves first\n     horizontal, then vertical, whereas 'type = \"S\"' moves the other\n     way around.\n\nNote:\n\n     The 'plot' generic was moved from the 'graphics' package to the\n     'base' package in R 4.0.0. It is currently re-exported from the\n     'graphics' namespace to allow packages importing it from there to\n     continue working, but this may change in future versions of R.\n\nSee Also:\n\n     'plot.default', 'plot.formula' and other methods; 'points',\n     'lines', 'par'.  For thousands of points, consider using\n     'smoothScatter()' instead of 'plot()'.\n\n     For X-Y-Z plotting see 'contour', 'persp' and 'image'.\n\nExamples:\n\n     require(stats) # for lowess, rpois, rnorm\n     require(graphics) # for plot methods\n     plot(cars)\n     lines(lowess(cars))\n     \n     plot(sin, -pi, 2*pi) # see ?plot.function\n     \n     ## Discrete Distribution Plot:\n     plot(table(rpois(100, 5)), type = \"h\", col = \"red\", lwd = 10,\n          main = \"rpois(100, lambda = 5)\")\n     \n     ## Simple quantiles/ECDF, see ecdf() {library(stats)} for a better one:\n     plot(x <- sort(rnorm(47)), type = \"s\", main = \"plot(x, type = \\\"s\\\")\")\n     points(x, cex = .5, col = \"dark red\")\n\n\n\n## `plot()` example\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df$age, df$IgG_concentration)\n```\n\n::: {.cell-output-display}\n![](Module10-DataVisualization_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n\n```{.r .cell-code}\nplot(\n\tdf$age, \n\tdf$IgG_concentration, \n\ttype=\"p\", \n\tmain=\"Age by IgG Concentrations\", \n\txlab=\"Age (years)\", \n\tylab=\"IgG Concentration (IU/mL)\", \n\tpch=16, \n\tcex=0.9,\n\tcol=\"lightblue\")\n```\n\n::: {.cell-output-display}\n![](Module10-DataVisualization_files/figure-revealjs/unnamed-chunk-15-2.png){width=960}\n:::\n:::\n\n\n## Adding more stuff to the same plot\n\n* We can use the functions `points()` or `lines()` to add additional points\nor additional lines to an existing plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n\tdf$age[df$slum == \"Non slum\"],\n\tdf$IgG_concentration[df$slum == \"Non slum\"],\n\ttype = \"p\",\n\tmain = \"IgG Concentration vs Age\",\n\txlab = \"Age (years)\",\n\tylab = \"IgG Concentration (IU/mL)\",\n\tpch = 16,\n\tcex = 0.9,\n\tcol = \"lightblue\",\n\txlim = range(df$age, na.rm = TRUE),\n\tylim = range(df$IgG_concentration, na.rm = TRUE)\n)\npoints(\n\tdf$age[df$slum == \"Mixed\"],\n\tdf$IgG_concentration[df$slum == \"Mixed\"],\n\tpch = 16,\n\tcex = 0.9,\n\tcol = \"blue\"\n)\npoints(\n\tdf$age[df$slum == \"Slum\"],\n\tdf$IgG_concentration[df$slum == \"Slum\"],\n\tpch = 16,\n\tcex = 0.9,\n\tcol = \"darkblue\"\n)\n```\n\n::: {.cell-output-display}\n![](Module10-DataVisualization_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n* The `lines()` function works similarly for connected lines.\n* Note that the `points()` or `lines()` functions must be called with a `plot()`-style function\n* We will show how we could draw a `legend()` in a future section.\n\n\n## `boxplot()` Help File\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?boxplot\n```\n:::\n\nBox Plots\n\nDescription:\n\n     Produce box-and-whisker plot(s) of the given (grouped) values.\n\nUsage:\n\n     boxplot(x, ...)\n     \n     ## S3 method for class 'formula'\n     boxplot(formula, data = NULL, ..., subset, na.action = NULL,\n             xlab = mklab(y_var = horizontal),\n             ylab = mklab(y_var =!horizontal),\n             add = FALSE, ann = !add, horizontal = FALSE,\n             drop = FALSE, sep = \".\", lex.order = FALSE)\n     \n     ## Default S3 method:\n     boxplot(x, ..., range = 1.5, width = NULL, varwidth = FALSE,\n             notch = FALSE, outline = TRUE, names, plot = TRUE,\n             border = par(\"fg\"), col = \"lightgray\", log = \"\",\n             pars = list(boxwex = 0.8, staplewex = 0.5, outwex = 0.5),\n              ann = !add, horizontal = FALSE, add = FALSE, at = NULL)\n     \nArguments:\n\n formula: a formula, such as 'y ~ grp', where 'y' is a numeric vector\n          of data values to be split into groups according to the\n          grouping variable 'grp' (usually a factor).  Note that '~ g1\n          + g2' is equivalent to 'g1:g2'.\n\n    data: a data.frame (or list) from which the variables in 'formula'\n          should be taken.\n\n  subset: an optional vector specifying a subset of observations to be\n          used for plotting.\n\nna.action: a function which indicates what should happen when the data\n          contain 'NA's.  The default is to ignore missing values in\n          either the response or the group.\n\nxlab, ylab: x- and y-axis annotation, since R 3.6.0 with a non-empty\n          default.  Can be suppressed by 'ann=FALSE'.\n\n     ann: 'logical' indicating if axes should be annotated (by 'xlab'\n          and 'ylab').\n\ndrop, sep, lex.order: passed to 'split.default', see there.\n\n       x: for specifying data from which the boxplots are to be\n          produced. Either a numeric vector, or a single list\n          containing such vectors. Additional unnamed arguments specify\n          further data as separate vectors (each corresponding to a\n          component boxplot).  'NA's are allowed in the data.\n\n     ...: For the 'formula' method, named arguments to be passed to the\n          default method.\n\n          For the default method, unnamed arguments are additional data\n          vectors (unless 'x' is a list when they are ignored), and\n          named arguments are arguments and graphical parameters to be\n          passed to 'bxp' in addition to the ones given by argument\n          'pars' (and override those in 'pars'). Note that 'bxp' may or\n          may not make use of graphical parameters it is passed: see\n          its documentation.\n\n   range: this determines how far the plot whiskers extend out from the\n          box.  If 'range' is positive, the whiskers extend to the most\n          extreme data point which is no more than 'range' times the\n          interquartile range from the box. A value of zero causes the\n          whiskers to extend to the data extremes.\n\n   width: a vector giving the relative widths of the boxes making up\n          the plot.\n\nvarwidth: if 'varwidth' is 'TRUE', the boxes are drawn with widths\n          proportional to the square-roots of the number of\n          observations in the groups.\n\n   notch: if 'notch' is 'TRUE', a notch is drawn in each side of the\n          boxes.  If the notches of two plots do not overlap this is\n          'strong evidence' that the two medians differ (Chambers et\n          al., 1983, p. 62).  See 'boxplot.stats' for the calculations\n          used.\n\n outline: if 'outline' is not true, the outliers are not drawn (as\n          points whereas S+ uses lines).\n\n   names: group labels which will be printed under each boxplot.  Can\n          be a character vector or an expression (see plotmath).\n\n  boxwex: a scale factor to be applied to all boxes.  When there are\n          only a few groups, the appearance of the plot can be improved\n          by making the boxes narrower.\n\nstaplewex: staple line width expansion, proportional to box width.\n\n  outwex: outlier line width expansion, proportional to box width.\n\n    plot: if 'TRUE' (the default) then a boxplot is produced.  If not,\n          the summaries which the boxplots are based on are returned.\n\n  border: an optional vector of colors for the outlines of the\n          boxplots.  The values in 'border' are recycled if the length\n          of 'border' is less than the number of plots.\n\n     col: if 'col' is non-null it is assumed to contain colors to be\n          used to colour the bodies of the box plots. By default they\n          are in the background colour.\n\n     log: character indicating if x or y or both coordinates should be\n          plotted in log scale.\n\n    pars: a list of (potentially many) more graphical parameters, e.g.,\n          'boxwex' or 'outpch'; these are passed to 'bxp' (if 'plot' is\n          true); for details, see there.\n\nhorizontal: logical indicating if the boxplots should be horizontal;\n          default 'FALSE' means vertical boxes.\n\n     add: logical, if true _add_ boxplot to current plot.\n\n      at: numeric vector giving the locations where the boxplots should\n          be drawn, particularly when 'add = TRUE'; defaults to '1:n'\n          where 'n' is the number of boxes.\n\nDetails:\n\n     The generic function 'boxplot' currently has a default method\n     ('boxplot.default') and a formula interface ('boxplot.formula').\n\n     If multiple groups are supplied either as multiple arguments or\n     via a formula, parallel boxplots will be plotted, in the order of\n     the arguments or the order of the levels of the factor (see\n     'factor').\n\n     Missing values are ignored when forming boxplots.\n\nValue:\n\n     List with the following components:\n\n   stats: a matrix, each column contains the extreme of the lower\n          whisker, the lower hinge, the median, the upper hinge and the\n          extreme of the upper whisker for one group/plot.  If all the\n          inputs have the same class attribute, so will this component.\n\n       n: a vector with the number of (non-'NA') observations in each\n          group.\n\n    conf: a matrix where each column contains the lower and upper\n          extremes of the notch.\n\n     out: the values of any data points which lie beyond the extremes\n          of the whiskers.\n\n   group: a vector of the same length as 'out' whose elements indicate\n          to which group the outlier belongs.\n\n   names: a vector of names for the groups.\n\nReferences:\n\n     Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988).  _The New\n     S Language_.  Wadsworth & Brooks/Cole.\n\n     Chambers, J. M., Cleveland, W. S., Kleiner, B. and Tukey, P. A.\n     (1983).  _Graphical Methods for Data Analysis_.  Wadsworth &\n     Brooks/Cole.\n\n     Murrell, P. (2005).  _R Graphics_.  Chapman & Hall/CRC Press.\n\n     See also 'boxplot.stats'.\n\nSee Also:\n\n     'boxplot.stats' which does the computation, 'bxp' for the plotting\n     and more examples; and 'stripchart' for an alternative (with small\n     data sets).\n\nExamples:\n\n     ## boxplot on a formula:\n     boxplot(count ~ spray, data = InsectSprays, col = \"lightgray\")\n     # *add* notches (somewhat funny here <--> warning \"notches .. outside hinges\"):\n     boxplot(count ~ spray, data = InsectSprays,\n             notch = TRUE, add = TRUE, col = \"blue\")\n     \n     boxplot(decrease ~ treatment, data = OrchardSprays, col = \"bisque\",\n             log = \"y\")\n     ## horizontal=TRUE, switching  y <--> x :\n     boxplot(decrease ~ treatment, data = OrchardSprays, col = \"bisque\",\n             log = \"x\", horizontal=TRUE)\n     \n     rb <- boxplot(decrease ~ treatment, data = OrchardSprays, col = \"bisque\")\n     title(\"Comparing boxplot()s and non-robust mean +/- SD\")\n     mn.t <- tapply(OrchardSprays$decrease, OrchardSprays$treatment, mean)\n     sd.t <- tapply(OrchardSprays$decrease, OrchardSprays$treatment, sd)\n     xi <- 0.3 + seq(rb$n)\n     points(xi, mn.t, col = \"orange\", pch = 18)\n     arrows(xi, mn.t - sd.t, xi, mn.t + sd.t,\n            code = 3, col = \"pink\", angle = 75, length = .1)\n     \n     ## boxplot on a matrix:\n     mat <- cbind(Uni05 = (1:100)/21, Norm = rnorm(100),\n                  `5T` = rt(100, df = 5), Gam2 = rgamma(100, shape = 2))\n     boxplot(mat) # directly, calling boxplot.matrix()\n     \n     ## boxplot on a data frame:\n     df. <- as.data.frame(mat)\n     par(las = 1) # all axis labels horizontal\n     boxplot(df., main = \"boxplot(*, horizontal = TRUE)\", horizontal = TRUE)\n     \n     ## Using 'at = ' and adding boxplots -- example idea by Roger Bivand :\n     boxplot(len ~ dose, data = ToothGrowth,\n             boxwex = 0.25, at = 1:3 - 0.2,\n             subset = supp == \"VC\", col = \"yellow\",\n             main = \"Guinea Pigs' Tooth Growth\",\n             xlab = \"Vitamin C dose mg\",\n             ylab = \"tooth length\",\n             xlim = c(0.5, 3.5), ylim = c(0, 35), yaxs = \"i\")\n     boxplot(len ~ dose, data = ToothGrowth, add = TRUE,\n             boxwex = 0.25, at = 1:3 + 0.2,\n             subset = supp == \"OJ\", col = \"orange\")\n     legend(2, 9, c(\"Ascorbic acid\", \"Orange juice\"),\n            fill = c(\"yellow\", \"orange\"))\n     \n     ## With less effort (slightly different) using factor *interaction*:\n     boxplot(len ~ dose:supp, data = ToothGrowth,\n             boxwex = 0.5, col = c(\"orange\", \"yellow\"),\n             main = \"Guinea Pigs' Tooth Growth\",\n             xlab = \"Vitamin C dose mg\", ylab = \"tooth length\",\n             sep = \":\", lex.order = TRUE, ylim = c(0, 35), yaxs = \"i\")\n     \n     ## more examples in  help(bxp)\n\n\n\n## `boxplot()` example\n\nReminder function signature\n```\nboxplot(formula, data = NULL, ..., subset, na.action = NULL,\n        xlab = mklab(y_var = horizontal),\n        ylab = mklab(y_var =!horizontal),\n        add = FALSE, ann = !add, horizontal = FALSE,\n        drop = FALSE, sep = \".\", lex.order = FALSE)\n```\n\nLet's practice\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(IgG_concentration~age_group, data=df)\n```\n\n::: {.cell-output-display}\n![](Module10-DataVisualization_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n\n```{.r .cell-code}\nboxplot(\n\tlog(df$IgG_concentration)~df$age_group, \n\tmain=\"Age by IgG Concentrations\", \n\txlab=\"Age Group (years)\", \n\tylab=\"log IgG Concentration (mIU/mL)\", \n\tnames=c(\"1-5\",\"6-10\", \"11-15\"), \n\tvarwidth=T\n\t)\n```\n\n::: {.cell-output-display}\n![](Module10-DataVisualization_files/figure-revealjs/unnamed-chunk-19-2.png){width=960}\n:::\n:::\n\n\n\n## `barplot()` Help File\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?barplot\n```\n:::\n\nBar Plots\n\nDescription:\n\n     Creates a bar plot with vertical or horizontal bars.\n\nUsage:\n\n     barplot(height, ...)\n     \n     ## Default S3 method:\n     barplot(height, width = 1, space = NULL,\n             names.arg = NULL, legend.text = NULL, beside = FALSE,\n             horiz = FALSE, density = NULL, angle = 45,\n             col = NULL, border = par(\"fg\"),\n             main = NULL, sub = NULL, xlab = NULL, ylab = NULL,\n             xlim = NULL, ylim = NULL, xpd = TRUE, log = \"\",\n             axes = TRUE, axisnames = TRUE,\n             cex.axis = par(\"cex.axis\"), cex.names = par(\"cex.axis\"),\n             inside = TRUE, plot = TRUE, axis.lty = 0, offset = 0,\n             add = FALSE, ann = !add && par(\"ann\"), args.legend = NULL, ...)\n     \n     ## S3 method for class 'formula'\n     barplot(formula, data, subset, na.action,\n             horiz = FALSE, xlab = NULL, ylab = NULL, ...)\n     \nArguments:\n\n  height: either a vector or matrix of values describing the bars which\n          make up the plot.  If 'height' is a vector, the plot consists\n          of a sequence of rectangular bars with heights given by the\n          values in the vector.  If 'height' is a matrix and 'beside'\n          is 'FALSE' then each bar of the plot corresponds to a column\n          of 'height', with the values in the column giving the heights\n          of stacked sub-bars making up the bar.  If 'height' is a\n          matrix and 'beside' is 'TRUE', then the values in each column\n          are juxtaposed rather than stacked.\n\n   width: optional vector of bar widths. Re-cycled to length the number\n          of bars drawn.  Specifying a single value will have no\n          visible effect unless 'xlim' is specified.\n\n   space: the amount of space (as a fraction of the average bar width)\n          left before each bar.  May be given as a single number or one\n          number per bar.  If 'height' is a matrix and 'beside' is\n          'TRUE', 'space' may be specified by two numbers, where the\n          first is the space between bars in the same group, and the\n          second the space between the groups.  If not given\n          explicitly, it defaults to 'c(0,1)' if 'height' is a matrix\n          and 'beside' is 'TRUE', and to 0.2 otherwise.\n\nnames.arg: a vector of names to be plotted below each bar or group of\n          bars.  If this argument is omitted, then the names are taken\n          from the 'names' attribute of 'height' if this is a vector,\n          or the column names if it is a matrix.\n\nlegend.text: a vector of text used to construct a legend for the plot,\n          or a logical indicating whether a legend should be included.\n          This is only useful when 'height' is a matrix.  In that case\n          given legend labels should correspond to the rows of\n          'height'; if 'legend.text' is true, the row names of 'height'\n          will be used as labels if they are non-null.\n\n  beside: a logical value.  If 'FALSE', the columns of 'height' are\n          portrayed as stacked bars, and if 'TRUE' the columns are\n          portrayed as juxtaposed bars.\n\n   horiz: a logical value.  If 'FALSE', the bars are drawn vertically\n          with the first bar to the left.  If 'TRUE', the bars are\n          drawn horizontally with the first at the bottom.\n\n density: a vector giving the density of shading lines, in lines per\n          inch, for the bars or bar components.  The default value of\n          'NULL' means that no shading lines are drawn. Non-positive\n          values of 'density' also inhibit the drawing of shading\n          lines.\n\n   angle: the slope of shading lines, given as an angle in degrees\n          (counter-clockwise), for the bars or bar components.\n\n     col: a vector of colors for the bars or bar components.  By\n          default, '\"grey\"' is used if 'height' is a vector, and a\n          gamma-corrected grey palette if 'height' is a matrix; see\n          'grey.colors'.\n\n  border: the color to be used for the border of the bars.  Use 'border\n          = NA' to omit borders.  If there are shading lines, 'border =\n          TRUE' means use the same colour for the border as for the\n          shading lines.\n\nmain, sub: main title and subtitle for the plot.\n\n    xlab: a label for the x axis.\n\n    ylab: a label for the y axis.\n\n    xlim: limits for the x axis.\n\n    ylim: limits for the y axis.\n\n     xpd: logical. Should bars be allowed to go outside region?\n\n     log: string specifying if axis scales should be logarithmic; see\n          'plot.default'.\n\n    axes: logical.  If 'TRUE', a vertical (or horizontal, if 'horiz' is\n          true) axis is drawn.\n\naxisnames: logical.  If 'TRUE', and if there are 'names.arg' (see\n          above), the other axis is drawn (with 'lty = 0') and labeled.\n\ncex.axis: expansion factor for numeric axis labels (see 'par('cex')').\n\ncex.names: expansion factor for axis names (bar labels).\n\n  inside: logical.  If 'TRUE', the lines which divide adjacent\n          (non-stacked!) bars will be drawn.  Only applies when 'space\n          = 0' (which it partly is when 'beside = TRUE').\n\n    plot: logical.  If 'FALSE', nothing is plotted.\n\naxis.lty: the graphics parameter 'lty' (see 'par('lty')') applied to\n          the axis and tick marks of the categorical (default\n          horizontal) axis.  Note that by default the axis is\n          suppressed.\n\n  offset: a vector indicating how much the bars should be shifted\n          relative to the x axis.\n\n     add: logical specifying if bars should be added to an already\n          existing plot; defaults to 'FALSE'.\n\n     ann: logical specifying if the default annotation ('main', 'sub',\n          'xlab', 'ylab') should appear on the plot, see 'title'.\n\nargs.legend: list of additional arguments to pass to 'legend()'; names\n          of the list are used as argument names.  Only used if\n          'legend.text' is supplied.\n\n formula: a formula where the 'y' variables are numeric data to plot\n          against the categorical 'x' variables.  The formula can have\n          one of three forms:\n\n                y ~ x\n                y ~ x1 + x2\n                cbind(y1, y2) ~ x\n          \n          (see the examples).\n\n    data: a data frame (or list) from which the variables in formula\n          should be taken.\n\n  subset: an optional vector specifying a subset of observations to be\n          used.\n\nna.action: a function which indicates what should happen when the data\n          contain 'NA' values.  The default is to ignore missing values\n          in the given variables.\n\n     ...: arguments to be passed to/from other methods.  For the\n          default method these can include further arguments (such as\n          'axes', 'asp' and 'main') and graphical parameters (see\n          'par') which are passed to 'plot.window()', 'title()' and\n          'axis'.\n\nValue:\n\n     A numeric vector (or matrix, when 'beside = TRUE'), say 'mp',\n     giving the coordinates of _all_ the bar midpoints drawn, useful\n     for adding to the graph.\n\n     If 'beside' is true, use 'colMeans(mp)' for the midpoints of each\n     _group_ of bars, see example.\n\nAuthor(s):\n\n     R Core, with a contribution by Arni Magnusson.\n\nReferences:\n\n     Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) _The New S\n     Language_.  Wadsworth & Brooks/Cole.\n\n     Murrell, P. (2005) _R Graphics_. Chapman & Hall/CRC Press.\n\nSee Also:\n\n     'plot(..., type = \"h\")', 'dotchart'; 'hist' for bars of a\n     _continuous_ variable.  'mosaicplot()', more sophisticated to\n     visualize _several_ categorical variables.\n\nExamples:\n\n     # Formula method\n     barplot(GNP ~ Year, data = longley)\n     barplot(cbind(Employed, Unemployed) ~ Year, data = longley)\n     \n     ## 3rd form of formula - 2 categories :\n     op <- par(mfrow = 2:1, mgp = c(3,1,0)/2, mar = .1+c(3,3:1))\n     summary(d.Titanic <- as.data.frame(Titanic))\n     barplot(Freq ~ Class + Survived, data = d.Titanic,\n             subset = Age == \"Adult\" & Sex == \"Male\",\n             main = \"barplot(Freq ~ Class + Survived, *)\", ylab = \"# {passengers}\", legend.text = TRUE)\n     # Corresponding table :\n     (xt <- xtabs(Freq ~ Survived + Class + Sex, d.Titanic, subset = Age==\"Adult\"))\n     # Alternatively, a mosaic plot :\n     mosaicplot(xt[,,\"Male\"], main = \"mosaicplot(Freq ~ Class + Survived, *)\", color=TRUE)\n     par(op)\n     \n     \n     # Default method\n     require(grDevices) # for colours\n     tN <- table(Ni <- stats::rpois(100, lambda = 5))\n     r <- barplot(tN, col = rainbow(20))\n     #- type = \"h\" plotting *is* 'bar'plot\n     lines(r, tN, type = \"h\", col = \"red\", lwd = 2)\n     \n     barplot(tN, space = 1.5, axisnames = FALSE,\n             sub = \"barplot(..., space= 1.5, axisnames = FALSE)\")\n     \n     barplot(VADeaths, plot = FALSE)\n     barplot(VADeaths, plot = FALSE, beside = TRUE)\n     \n     mp <- barplot(VADeaths) # default\n     tot <- colMeans(VADeaths)\n     text(mp, tot + 3, format(tot), xpd = TRUE, col = \"blue\")\n     barplot(VADeaths, beside = TRUE,\n             col = c(\"lightblue\", \"mistyrose\", \"lightcyan\",\n                     \"lavender\", \"cornsilk\"),\n             legend.text = rownames(VADeaths), ylim = c(0, 100))\n     title(main = \"Death Rates in Virginia\", font.main = 4)\n     \n     hh <- t(VADeaths)[, 5:1]\n     mybarcol <- \"gray20\"\n     mp <- barplot(hh, beside = TRUE,\n             col = c(\"lightblue\", \"mistyrose\",\n                     \"lightcyan\", \"lavender\"),\n             legend.text = colnames(VADeaths), ylim = c(0,100),\n             main = \"Death Rates in Virginia\", font.main = 4,\n             sub = \"Faked upper 2*sigma error bars\", col.sub = mybarcol,\n             cex.names = 1.5)\n     segments(mp, hh, mp, hh + 2*sqrt(1000*hh/100), col = mybarcol, lwd = 1.5)\n     stopifnot(dim(mp) == dim(hh))  # corresponding matrices\n     mtext(side = 1, at = colMeans(mp), line = -2,\n           text = paste(\"Mean\", formatC(colMeans(hh))), col = \"red\")\n     \n     # Bar shading example\n     barplot(VADeaths, angle = 15+10*1:5, density = 20, col = \"black\",\n             legend.text = rownames(VADeaths))\n     title(main = list(\"Death Rates in Virginia\", font = 4))\n     \n     # Border color\n     barplot(VADeaths, border = \"dark blue\") \n     \n     # Log scales (not much sense here)\n     barplot(tN, col = heat.colors(12), log = \"y\")\n     barplot(tN, col = gray.colors(20), log = \"xy\")\n     \n     # Legend location\n     barplot(height = cbind(x = c(465, 91) / 465 * 100,\n                            y = c(840, 200) / 840 * 100,\n                            z = c(37, 17) / 37 * 100),\n             beside = FALSE,\n             width = c(465, 840, 37),\n             col = c(1, 2),\n             legend.text = c(\"A\", \"B\"),\n             args.legend = list(x = \"topleft\"))\n\n\n\n## `barplot()` example\n\nThe function takes the a lot of arguments to control the way the way our data is plotted. \n\nReminder function signature\n```\nbarplot(height, width = 1, space = NULL,\n        names.arg = NULL, legend.text = NULL, beside = FALSE,\n        horiz = FALSE, density = NULL, angle = 45,\n        col = NULL, border = par(\"fg\"),\n        main = NULL, sub = NULL, xlab = NULL, ylab = NULL,\n        xlim = NULL, ylim = NULL, xpd = TRUE, log = \"\",\n        axes = TRUE, axisnames = TRUE,\n        cex.axis = par(\"cex.axis\"), cex.names = par(\"cex.axis\"),\n        inside = TRUE, plot = TRUE, axis.lty = 0, offset = 0,\n        add = FALSE, ann = !add && par(\"ann\"), args.legend = NULL, ...)\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfreq <- table(df$seropos, df$age_group)\nbarplot(freq)\n```\n\n::: {.cell-output-display}\n![](Module10-DataVisualization_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n\n```{.r .cell-code}\nprop.cell.percentages <- prop.table(freq)\nbarplot(prop.cell.percentages)\n```\n\n::: {.cell-output-display}\n![](Module10-DataVisualization_files/figure-revealjs/unnamed-chunk-22-2.png){width=960}\n:::\n:::\n\n\n## 3. Legend!\n\nIn Base R plotting the legend is not automatically generated.  This is nice because it gives you a huge amount of control over how your legend looks, but it is also easy to mislabel your colors, symbols, line types, etc. So, basically be careful.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?legend\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nAdd Legends to Plots\n\nDescription:\n\n     This function can be used to add legends to plots.  Note that a\n     call to the function 'locator(1)' can be used in place of the 'x'\n     and 'y' arguments.\n\nUsage:\n\n     legend(x, y = NULL, legend, fill = NULL, col = par(\"col\"),\n            border = \"black\", lty, lwd, pch,\n            angle = 45, density = NULL, bty = \"o\", bg = par(\"bg\"),\n            box.lwd = par(\"lwd\"), box.lty = par(\"lty\"), box.col = par(\"fg\"),\n            pt.bg = NA, cex = 1, pt.cex = cex, pt.lwd = lwd,\n            xjust = 0, yjust = 1, x.intersp = 1, y.intersp = 1,\n            adj = c(0, 0.5), text.width = NULL, text.col = par(\"col\"),\n            text.font = NULL, merge = do.lines && has.pch, trace = FALSE,\n            plot = TRUE, ncol = 1, horiz = FALSE, title = NULL,\n            inset = 0, xpd, title.col = text.col[1], title.adj = 0.5,\n            title.cex = cex[1], title.font = text.font[1],\n            seg.len = 2)\n     \nArguments:\n\n    x, y: the x and y co-ordinates to be used to position the legend.\n          They can be specified by keyword or in any way which is\n          accepted by 'xy.coords': See 'Details'.\n\n  legend: a character or expression vector of length >= 1 to appear in\n          the legend.  Other objects will be coerced by\n          'as.graphicsAnnot'.\n\n    fill: if specified, this argument will cause boxes filled with the\n          specified colors (or shaded in the specified colors) to\n          appear beside the legend text.\n\n     col: the color of points or lines appearing in the legend.\n\n  border: the border color for the boxes (used only if 'fill' is\n          specified).\n\nlty, lwd: the line types and widths for lines appearing in the legend.\n          One of these two _must_ be specified for line drawing.\n\n     pch: the plotting symbols appearing in the legend, as numeric\n          vector or a vector of 1-character strings (see 'points').\n          Unlike 'points', this can all be specified as a single\n          multi-character string.  _Must_ be specified for symbol\n          drawing.\n\n   angle: angle of shading lines.\n\n density: the density of shading lines, if numeric and positive. If\n          'NULL' or negative or 'NA' color filling is assumed.\n\n     bty: the type of box to be drawn around the legend.  The allowed\n          values are '\"o\"' (the default) and '\"n\"'.\n\n      bg: the background color for the legend box.  (Note that this is\n          only used if 'bty != \"n\"'.)\n\nbox.lty, box.lwd, box.col: the line type, width and color for the\n          legend box (if 'bty = \"o\"').\n\n   pt.bg: the background color for the 'points', corresponding to its\n          argument 'bg'.\n\n     cex: character expansion factor *relative* to current\n          'par(\"cex\")'.  Used for text, and provides the default for\n          'pt.cex'.\n\n  pt.cex: expansion factor(s) for the points.\n\n  pt.lwd: line width for the points, defaults to the one for lines, or\n          if that is not set, to 'par(\"lwd\")'.\n\n   xjust: how the legend is to be justified relative to the legend x\n          location.  A value of 0 means left justified, 0.5 means\n          centered and 1 means right justified.\n\n   yjust: the same as 'xjust' for the legend y location.\n\nx.intersp: character interspacing factor for horizontal (x) spacing\n          between symbol and legend text.\n\ny.intersp: vertical (y) distances (in lines of text shared above/below\n          each legend entry).  A vector with one element for each row\n          of the legend can be used.\n\n     adj: numeric of length 1 or 2; the string adjustment for legend\n          text.  Useful for y-adjustment when 'labels' are plotmath\n          expressions.\n\ntext.width: the width of the legend text in x ('\"user\"') coordinates.\n          (Should be positive even for a reversed x axis.)  Can be a\n          single positive numeric value (same width for each column of\n          the legend), a vector (one element for each column of the\n          legend), 'NULL' (default) for computing a proper maximum\n          value of 'strwidth(legend)'), or 'NA' for computing a proper\n          column wise maximum value of 'strwidth(legend)').\n\ntext.col: the color used for the legend text.\n\ntext.font: the font used for the legend text, see 'text'.\n\n   merge: logical; if 'TRUE', merge points and lines but not filled\n          boxes.  Defaults to 'TRUE' if there are points and lines.\n\n   trace: logical; if 'TRUE', shows how 'legend' does all its magical\n          computations.\n\n    plot: logical.  If 'FALSE', nothing is plotted but the sizes are\n          returned.\n\n    ncol: the number of columns in which to set the legend items\n          (default is 1, a vertical legend).\n\n   horiz: logical; if 'TRUE', set the legend horizontally rather than\n          vertically (specifying 'horiz' overrides the 'ncol'\n          specification).\n\n   title: a character string or length-one expression giving a title to\n          be placed at the top of the legend.  Other objects will be\n          coerced by 'as.graphicsAnnot'.\n\n   inset: inset distance(s) from the margins as a fraction of the plot\n          region when legend is placed by keyword.\n\n     xpd: if supplied, a value of the graphical parameter 'xpd' to be\n          used while the legend is being drawn.\n\ntitle.col: color for 'title', defaults to 'text.col[1]'.\n\ntitle.adj: horizontal adjustment for 'title': see the help for\n          'par(\"adj\")'.\n\ntitle.cex: expansion factor(s) for the title, defaults to 'cex[1]'.\n\ntitle.font: the font used for the legend title, defaults to\n          'text.font[1]', see 'text'.\n\n seg.len: the length of lines drawn to illustrate 'lty' and/or 'lwd'\n          (in units of character widths).\n\nDetails:\n\n     Arguments 'x', 'y', 'legend' are interpreted in a non-standard way\n     to allow the coordinates to be specified _via_ one or two\n     arguments.  If 'legend' is missing and 'y' is not numeric, it is\n     assumed that the second argument is intended to be 'legend' and\n     that the first argument specifies the coordinates.\n\n     The coordinates can be specified in any way which is accepted by\n     'xy.coords'.  If this gives the coordinates of one point, it is\n     used as the top-left coordinate of the rectangle containing the\n     legend.  If it gives the coordinates of two points, these specify\n     opposite corners of the rectangle (either pair of corners, in any\n     order).\n\n     The location may also be specified by setting 'x' to a single\n     keyword from the list '\"bottomright\"', '\"bottom\"', '\"bottomleft\"',\n     '\"left\"', '\"topleft\"', '\"top\"', '\"topright\"', '\"right\"' and\n     '\"center\"'. This places the legend on the inside of the plot frame\n     at the given location. Partial argument matching is used.  The\n     optional 'inset' argument specifies how far the legend is inset\n     from the plot margins.  If a single value is given, it is used for\n     both margins; if two values are given, the first is used for 'x'-\n     distance, the second for 'y'-distance.\n\n     Attribute arguments such as 'col', 'pch', 'lty', etc, are recycled\n     if necessary: 'merge' is not.  Set entries of 'lty' to '0' or set\n     entries of 'lwd' to 'NA' to suppress lines in corresponding legend\n     entries; set 'pch' values to 'NA' to suppress points.\n\n     Points are drawn _after_ lines in order that they can cover the\n     line with their background color 'pt.bg', if applicable.\n\n     See the examples for how to right-justify labels.\n\n     Since they are not used for Unicode code points, values '-31:-1'\n     are silently omitted, as are 'NA' and '\"\"' values.\n\nValue:\n\n     A list with list components\n\n    rect: a list with components\n\n          'w', 'h' positive numbers giving *w*idth and *h*eight of the\n              legend's box.\n\n          'left', 'top' x and y coordinates of upper left corner of the\n              box.\n\n    text: a list with components\n\n          'x, y' numeric vectors of length 'length(legend)', giving the\n              x and y coordinates of the legend's text(s).\n\n     returned invisibly.\n\nReferences:\n\n     Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) _The New S\n     Language_.  Wadsworth & Brooks/Cole.\n\n     Murrell, P. (2005) _R Graphics_. Chapman & Hall/CRC Press.\n\nSee Also:\n\n     'plot', 'barplot' which uses 'legend()', and 'text' for more\n     examples of math expressions.\n\nExamples:\n\n     ## Run the example in '?matplot' or the following:\n     leg.txt <- c(\"Setosa     Petals\", \"Setosa     Sepals\",\n                  \"Versicolor Petals\", \"Versicolor Sepals\")\n     y.leg <- c(4.5, 3, 2.1, 1.4, .7)\n     cexv  <- c(1.2, 1, 4/5, 2/3, 1/2)\n     matplot(c(1, 8), c(0, 4.5), type = \"n\", xlab = \"Length\", ylab = \"Width\",\n             main = \"Petal and Sepal Dimensions in Iris Blossoms\")\n     for (i in seq(cexv)) {\n       text  (1, y.leg[i] - 0.1, paste(\"cex=\", formatC(cexv[i])), cex = 0.8, adj = 0)\n       legend(3, y.leg[i], leg.txt, pch = \"sSvV\", col = c(1, 3), cex = cexv[i])\n     }\n     ## cex *vector* [in R <= 3.5.1 has 'if(xc < 0)' w/ length(xc) == 2]\n     legend(\"right\", leg.txt, pch = \"sSvV\", col = c(1, 3),\n            cex = 1+(-1:2)/8, trace = TRUE)# trace: show computed lengths & coords\n     \n     ## 'merge = TRUE' for merging lines & points:\n     x <- seq(-pi, pi, length.out = 65)\n     for(reverse in c(FALSE, TRUE)) {  ## normal *and* reverse axes:\n       F <- if(reverse) rev else identity\n       plot(x, sin(x), type = \"l\", col = 3, lty = 2,\n            xlim = F(range(x)), ylim = F(c(-1.2, 1.8)))\n       points(x, cos(x), pch = 3, col = 4)\n       lines(x, tan(x), type = \"b\", lty = 1, pch = 4, col = 6)\n       title(\"legend('top', lty = c(2, -1, 1), pch = c(NA, 3, 4), merge = TRUE)\",\n             cex.main = 1.1)\n       legend(\"top\", c(\"sin\", \"cos\", \"tan\"), col = c(3, 4, 6),\n            text.col = \"green4\", lty = c(2, -1, 1), pch = c(NA, 3, 4),\n            merge = TRUE, bg = \"gray90\", trace=TRUE)\n       \n     } # for(..)\n     \n     ## right-justifying a set of labels: thanks to Uwe Ligges\n     x <- 1:5; y1 <- 1/x; y2 <- 2/x\n     plot(rep(x, 2), c(y1, y2), type = \"n\", xlab = \"x\", ylab = \"y\")\n     lines(x, y1); lines(x, y2, lty = 2)\n     temp <- legend(\"topright\", legend = c(\" \", \" \"),\n                    text.width = strwidth(\"1,000,000\"),\n                    lty = 1:2, xjust = 1, yjust = 1, inset = 1/10,\n                    title = \"Line Types\", title.cex = 0.5, trace=TRUE)\n     text(temp$rect$left + temp$rect$w, temp$text$y,\n          c(\"1,000\", \"1,000,000\"), pos = 2)\n     \n     \n     ##--- log scaled Examples ------------------------------\n     leg.txt <- c(\"a one\", \"a two\")\n     \n     par(mfrow = c(2, 2))\n     for(ll in c(\"\",\"x\",\"y\",\"xy\")) {\n       plot(2:10, log = ll, main = paste0(\"log = '\", ll, \"'\"))\n       abline(1, 1)\n       lines(2:3, 3:4, col = 2)\n       points(2, 2, col = 3)\n       rect(2, 3, 3, 2, col = 4)\n       text(c(3,3), 2:3, c(\"rect(2,3,3,2, col=4)\",\n                           \"text(c(3,3),2:3,\\\"c(rect(...)\\\")\"), adj = c(0, 0.3))\n       legend(list(x = 2,y = 8), legend = leg.txt, col = 2:3, pch = 1:2,\n              lty = 1)  #, trace = TRUE)\n     } #      ^^^^^^^ to force lines -> automatic merge=TRUE\n     par(mfrow = c(1,1))\n     \n     ##-- Math expressions:  ------------------------------\n     x <- seq(-pi, pi, length.out = 65)\n     plot(x, sin(x), type = \"l\", col = 2, xlab = expression(phi),\n          ylab = expression(f(phi)))\n     abline(h = -1:1, v = pi/2*(-6:6), col = \"gray90\")\n     lines(x, cos(x), col = 3, lty = 2)\n     ex.cs1 <- expression(plain(sin) * phi,  paste(\"cos\", phi))  # 2 ways\n     utils::str(legend(-3, .9, ex.cs1, lty = 1:2, plot = FALSE,\n                adj = c(0, 0.6)))  # adj y !\n     legend(-3, 0.9, ex.cs1, lty = 1:2, col = 2:3,  adj = c(0, 0.6))\n     \n     require(stats)\n     x <- rexp(100, rate = .5)\n     hist(x, main = \"Mean and Median of a Skewed Distribution\")\n     abline(v = mean(x),   col = 2, lty = 2, lwd = 2)\n     abline(v = median(x), col = 3, lty = 3, lwd = 2)\n     ex12 <- expression(bar(x) == sum(over(x[i], n), i == 1, n),\n                        hat(x) == median(x[i], i == 1, n))\n     utils::str(legend(4.1, 30, ex12, col = 2:3, lty = 2:3, lwd = 2))\n     \n     ## 'Filled' boxes -- see also example(barplot) which may call legend(*, fill=)\n     barplot(VADeaths)\n     legend(\"topright\", rownames(VADeaths), fill = gray.colors(nrow(VADeaths)))\n     \n     ## Using 'ncol'\n     x <- 0:64/64\n     for(R in c(identity, rev)) { # normal *and* reverse x-axis works fine:\n       xl <- R(range(x)); x1 <- xl[1]\n     matplot(x, outer(x, 1:7, function(x, k) sin(k * pi * x)), xlim=xl,\n             type = \"o\", col = 1:7, ylim = c(-1, 1.5), pch = \"*\")\n     op <- par(bg = \"antiquewhite1\")\n     legend(x1, 1.5, paste(\"sin(\", 1:7, \"pi * x)\"), col = 1:7, lty = 1:7,\n            pch = \"*\", ncol = 4, cex = 0.8)\n     legend(\"bottomright\", paste(\"sin(\", 1:7, \"pi * x)\"), col = 1:7, lty = 1:7,\n            pch = \"*\", cex = 0.8)\n     legend(x1, -.1, paste(\"sin(\", 1:4, \"pi * x)\"), col = 1:4, lty = 1:4,\n            ncol = 2, cex = 0.8)\n     legend(x1, -.4, paste(\"sin(\", 5:7, \"pi * x)\"), col = 4:6,  pch = 24,\n            ncol = 2, cex = 1.5, lwd = 2, pt.bg = \"pink\", pt.cex = 1:3)\n     par(op)\n       \n     } # for(..)\n     \n     ## point covering line :\n     y <- sin(3*pi*x)\n     plot(x, y, type = \"l\", col = \"blue\",\n         main = \"points with bg & legend(*, pt.bg)\")\n     points(x, y, pch = 21, bg = \"white\")\n     legend(.4,1, \"sin(c x)\", pch = 21, pt.bg = \"white\", lty = 1, col = \"blue\")\n     \n     ## legends with titles at different locations\n     plot(x, y, type = \"n\")\n     legend(\"bottomright\", \"(x,y)\", pch=1, title= \"bottomright\")\n     legend(\"bottom\",      \"(x,y)\", pch=1, title= \"bottom\")\n     legend(\"bottomleft\",  \"(x,y)\", pch=1, title= \"bottomleft\")\n     legend(\"left\",        \"(x,y)\", pch=1, title= \"left\")\n     legend(\"topleft\",     \"(x,y)\", pch=1, title= \"topleft, inset = .05\", inset = .05)\n     legend(\"top\",         \"(x,y)\", pch=1, title= \"top\")\n     legend(\"topright\",    \"(x,y)\", pch=1, title= \"topright, inset = .02\",inset = .02)\n     legend(\"right\",       \"(x,y)\", pch=1, title= \"right\")\n     legend(\"center\",      \"(x,y)\", pch=1, title= \"center\")\n     \n     # using text.font (and text.col):\n     op <- par(mfrow = c(2, 2), mar = rep(2.1, 4))\n     c6 <- terrain.colors(10)[1:6]\n     for(i in 1:4) {\n        plot(1, type = \"n\", axes = FALSE, ann = FALSE); title(paste(\"text.font =\",i))\n        legend(\"top\", legend = LETTERS[1:6], col = c6,\n               ncol = 2, cex = 2, lwd = 3, text.font = i, text.col = c6)\n     }\n     par(op)\n     \n     # using text.width for several columns\n     plot(1, type=\"n\")\n     legend(\"topleft\", c(\"This legend\", \"has\", \"equally sized\", \"columns.\"),\n            pch = 1:4, ncol = 4)\n     legend(\"bottomleft\", c(\"This legend\", \"has\", \"optimally sized\", \"columns.\"),\n            pch = 1:4, ncol = 4, text.width = NA)\n     legend(\"right\", letters[1:4], pch = 1:4, ncol = 4,\n            text.width = 1:4 / 50)\n```\n\n\n:::\n:::\n\n\n\n\n## Add legend to the plot\n\nReminder function signature\n```\nlegend(x, y = NULL, legend, fill = NULL, col = par(\"col\"),\n       border = \"black\", lty, lwd, pch,\n       angle = 45, density = NULL, bty = \"o\", bg = par(\"bg\"),\n       box.lwd = par(\"lwd\"), box.lty = par(\"lty\"), box.col = par(\"fg\"),\n       pt.bg = NA, cex = 1, pt.cex = cex, pt.lwd = lwd,\n       xjust = 0, yjust = 1, x.intersp = 1, y.intersp = 1,\n       adj = c(0, 0.5), text.width = NULL, text.col = par(\"col\"),\n       text.font = NULL, merge = do.lines && has.pch, trace = FALSE,\n       plot = TRUE, ncol = 1, horiz = FALSE, title = NULL,\n       inset = 0, xpd, title.col = text.col[1], title.adj = 0.5,\n       title.cex = cex[1], title.font = text.font[1],\n       seg.len = 2)\n```\n\nLet's practice\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(prop.cell.percentages, col=c(\"darkblue\",\"red\"), ylim=c(0,0.5), main=\"Seropositivity by Age Group\")\nlegend(x=2.5, y=0.5,\n\t\t\t fill=c(\"darkblue\",\"red\"), \n\t\t\t legend = c(\"seronegative\", \"seropositive\"))\n```\n:::\n\n\n\n## Add legend to the plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Module10-DataVisualization_files/figure-revealjs/unnamed-chunk-26-1.png){width=960}\n:::\n:::\n\n\n\n## `barplot()` example\n\nGetting closer, but what I really want is column proportions (i.e., the proportions should sum to one for each age group). Also, the age groups need more meaningful names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfreq <- table(df$seropos, df$age_group)\nprop.column.percentages <- prop.table(freq, margin=2)\ncolnames(prop.column.percentages) <- c(\"1-5 yo\", \"6-10 yo\", \"11-15 yo\")\n\nbarplot(prop.column.percentages, col=c(\"darkblue\",\"red\"), ylim=c(0,1.35), main=\"Seropositivity by Age Group\")\naxis(2, at = c(0.2, 0.4, 0.6, 0.8,1))\nlegend(x=2.8, y=1.35,\n\t\t\t fill=c(\"darkblue\",\"red\"), \n\t\t\t legend = c(\"seronegative\", \"seropositive\"))\n```\n:::\n\n\n## `barplot()` example\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Module10-DataVisualization_files/figure-revealjs/unnamed-chunk-28-1.png){width=960}\n:::\n:::\n\n\n\n\n## `barplot()` example\n\nNow, let look at seropositivity by two individual level characteristics in the same plot. \n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1,2))\nbarplot(prop.column.percentages, col=c(\"darkblue\",\"red\"), ylim=c(0,1.35), main=\"Seropositivity by Age Group\")\naxis(2, at = c(0.2, 0.4, 0.6, 0.8,1))\nlegend(\"topright\",\n\t\t\t fill=c(\"darkblue\",\"red\"), \n\t\t\t legend = c(\"seronegative\", \"seropositive\"))\n\nbarplot(prop.column.percentages2, col=c(\"darkblue\",\"red\"), ylim=c(0,1.35), main=\"Seropositivity by Residence\")\naxis(2, at = c(0.2, 0.4, 0.6, 0.8,1))\nlegend(\"topright\", fill=c(\"darkblue\",\"red\"),  legend = c(\"seronegative\", \"seropositive\"))\n```\n:::\n\n\n\n## `barplot()` example\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Module10-DataVisualization_files/figure-revealjs/unnamed-chunk-31-1.png){width=960}\n:::\n:::\n\n\n## Saving plots to file\n\nIf you want to include your graphic in a paper or anything else, you need to\nsave it as an image. One limitation of base R graphics is that the process for\nsaving plots is a bit annoying.\n\n1. Open a graphics device connection with a graphics function -- examples\ninclude `pdf()`, `png()`, and `tiff()` for the most useful.\n1. Run the code that creates your plot.\n1. Use `dev.off()` to close the graphics device connection.\n\nLet's do an example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Open the graphics device\npng(\n\t\"my-barplot.png\",\n\twidth = 800,\n\theight = 450,\n\tunits = \"px\"\n)\n# Set the plot layout -- this is an alternative to par(mfrow = ...)\nlayout(matrix(c(1, 2), ncol = 2))\n# Make the plot\nbarplot(prop.column.percentages, col=c(\"darkblue\",\"red\"), ylim=c(0,1.35), main=\"Seropositivity by Age Group\")\naxis(2, at = c(0.2, 0.4, 0.6, 0.8,1))\nlegend(\"topright\",\n\t\t\t fill=c(\"darkblue\",\"red\"), \n\t\t\t legend = c(\"seronegative\", \"seropositive\"))\n\nbarplot(prop.column.percentages2, col=c(\"darkblue\",\"red\"), ylim=c(0,1.35), main=\"Seropositivity by Residence\")\naxis(2, at = c(0.2, 0.4, 0.6, 0.8,1))\nlegend(\"topright\", fill=c(\"darkblue\",\"red\"),  legend = c(\"seronegative\", \"seropositive\"))\n# Close the graphics device\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nquartz_off_screen \n                2 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Reset the layout\nlayout(1)\n```\n:::\n\n\nNote: after you do an interactive graphics session, it is often helpful to\nrestart R or run the function `graphics.off()` before opening the graphics\nconnection device.\n\n## Base R plots vs the Tidyverse ggplot2 package\n\nIt is good to know both b/c they each have their strengths\n\n## Summary\n\n- the Base R 'graphics' package has a ton of graphics options that allow for ultimate flexibility\n- Base R plots typically include setting plot options (`par()`), mapping data to the plot (e.g., `plot()`, `barplot()`, `points()`, `lines()`), and creating a legend (`legend()`). \n- the functions `points()` or `lines()` add additional points or additional lines to an existing plot, but must be called with a `plot()`-style function\n- in Base R plotting the legend is not automatically generated, so be careful when creating it\n\n\n## Acknowledgements\n\nThese are the materials we looked through, modified, or extracted to complete this module's lecture.\n\n-   [\"Base Plotting in R\" by Medium](https://towardsdatascience.com/base-plotting-in-r-eb365da06b22)\n-\t\t[\"Base R margins: a cheatsheet\"](https://r-graph-gallery.com/74-margin-and-oma-cheatsheet.html)\n",
    "supporting": [
      "Module10-DataVisualization_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}