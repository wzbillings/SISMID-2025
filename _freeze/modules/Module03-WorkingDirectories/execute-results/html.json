{
  "hash": "1f02664a41917789064bfaadc3b94783",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Module 3: Working Directories\"\nformat: \n  revealjs:\n    scrollable: true\n    smaller: true\n    toc: false\n---\n\n\n\n## Learning Objectives\n\nAfter module 3, you should be able to...\n\n-   Understand your own systems' file structure and the purpose of the working directory\n-   Determine the working directory\n-   Change the working directory\n\n## File Structure\n\n**The internal file structure of the computer is completely nested!**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(here::here(\"images\", \"presentation4.webp\"))\n```\n\n::: {.cell-output-display}\n![](../images/presentation4.webp)\n:::\n:::\n\n\n\nComputer scientists call this the \"file tree\".\n\n## Working Directory -- Basic term\n\n-   R \"looks\" for files on your computer relative to the \"working\" directory\n-   For example, if you want to load data into R or save a figure, you will need to tell R where to look for or store the file\n-   Many people recommend not setting a directory in the scripts, rather assume you're in the directory the script is in\n\n## Understanding the working directory\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/map.PNG){fig-align='center'}\n:::\n:::\n\n\n\n## Understanding the working directory\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/map-floorplan.PNG){fig-align='center'}\n:::\n:::\n\n\n\n## Understanding the working directory\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/map-floor-room.PNG){fig-align='center'}\n:::\n:::\n\n\n\n## Understanding the working directory\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/map-wd.PNG){fig-align='center'}\n:::\n:::\n\n\n\n## Getting and setting the working directory using code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## get the working directory\ngetwd()\nsetwd(\"~/\") \n```\n:::\n\n\n\n## Setting a working directory\n\n-   Setting the directory can sometimes (almost always when new to R) be finicky\n    -   **Windows**: Default directory structure involves single backslashes (\"`\\`\"), but R interprets these as\"escape\" characters. So you must replace the backslash with forward slashes (\"/\") or two backslashes (\"`\\\\`\")\n    -   **Mac/Linux**: Default is forward slashes, so you are okay\n-   Typical directory structure syntax applies\n    -   \"..\" - goes up one level\n    -   \"./\" - is the current directory\n    -   \"\\~\" - is your \"home\" directory\n\n\n## Absolute vs. relative paths\n\nFrom Wiki\n\n-   An **absolute or full path** points to the same location in a file system, regardless of the current working directory. To do that, it must include the root directory. Absolute path is specific to your system alone. This means if I try your code, and you use absolute paths, it won't work unless we have the exact same folder structure where R is looking (bad).\n\n-   By contrast, a **relative path starts from some given working directory**, avoiding the need to provide the full absolute path.\n\n## Relative path\n\nYou want to set you code up based on relative paths.  This allows sharing of code, and also, allows you to modify your own file structure (above the working directory) without breaking your own code.\n\n\n## Setting the working directory using your cursor\n\nRemember above \"Many people recommend not setting a directory in the scripts, rather assume you're in the directory the script is in.\" To do so, go to Session --\\> Set Working Directory --\\> To Source File Location\n\nRStudio will show the code in the Console for the action you took with your cursor. This is a good way to learn about your file system how to set a correct working directory!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"~/Dropbox/Git/SISMID-2024\")\n```\n:::\n\n\n\n\n## Setting the Working Directory\n\nIf you have not yet saved a \"source\" file, it will set working directory to the default location.Find the Tool Menu in the Menu Bar -\\> Global Opsions -\\> General for default location.\n\nTo change the working directory to another location, find Session Menu in the Menu Bar --\\> Set Working Directory --\\> Choose Directory`\n\nAgain, RStudio will show the code in the Console for the action you took with your cursor.\n\n\n## Summary\n\n-   R \"looks\" for files on your computer relative to the \"working\" directory\n-   Absolute path points to the same location in a file system - it is specific to your system and your system alone\n-   Relative path points is based on the current working directory \n-   Two functions, `setwd()` and `getwd()` are useful for identifying and manipulating the working directory.\n\n\n## Acknowledgements\n\nThese are the materials we looked through, modified, or extracted to complete this module's lecture.\n\n-   [\"Introduction to R for Public Health Researchers\" Johns Hopkins University](https://jhudatascience.org/intro_to_r/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
