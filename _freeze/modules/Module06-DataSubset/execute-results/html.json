{
  "hash": "0bbf67d7985cff5d5614734a94dd46bb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Module 6: Get to Know Your Data and Subsetting\"\nformat: \n  revealjs:\n    scrollable: true\n    smaller: true\n    toc: false\n#execute: \n#  echo: true\n---\n\n\n\n\n## Learning Objectives\n\nAfter module 6, you should be able to...\n\n-   Use basic functions to get to know you data\n-   Use three indexing approaches\n-   Rely on indexing to extract part of an object (e.g., subset data) and to replace parts of an object (e.g., rename variables / columns)\n-   Describe what logical operators are and how to use them\n-   Use on the `subset()` function to subset data\n\n\n## Getting to know our data\n\nThe `dim()`, `nrow()`, and `ncol()` functions are good options to check the dimensions of your data before moving forward. \n\nLet's first read in the data from the previous module.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read.csv(file = \"data/serodata.csv\") #relative path\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(df) # rows, columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 651   5\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(df) # number of rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 651\n```\n\n\n:::\n\n```{.r .cell-code}\nncol(df) # number of columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n\n\n## Quick summary of data\n\nThe `colnames()`, `str()` and `summary()`functions from Base R are great functions to assess the data type and some summary statistics.    \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"observation_id\"    \"IgG_concentration\" \"age\"              \n[4] \"gender\"            \"slum\"             \n```\n\n\n:::\n\n```{.r .cell-code}\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t651 obs. of  5 variables:\n $ observation_id   : int  5772 8095 9784 9338 6369 6885 6252 8913 7332 6941 ...\n $ IgG_concentration: num  0.318 3.437 0.3 143.236 0.448 ...\n $ age              : int  2 4 4 4 1 4 4 NA 4 2 ...\n $ gender           : chr  \"Female\" \"Female\" \"Male\" \"Male\" ...\n $ slum             : chr  \"Non slum\" \"Non slum\" \"Non slum\" \"Non slum\" ...\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n observation_id IgG_concentration       age            gender         \n Min.   :5006   Min.   :  0.0054   Min.   : 1.000   Length:651        \n 1st Qu.:6306   1st Qu.:  0.3000   1st Qu.: 3.000   Class :character  \n Median :7495   Median :  1.6658   Median : 6.000   Mode  :character  \n Mean   :7492   Mean   : 87.3683   Mean   : 6.606                     \n 3rd Qu.:8749   3rd Qu.:141.4405   3rd Qu.:10.000                     \n Max.   :9982   Max.   :916.4179   Max.   :15.000                     \n                NA's   :10         NA's   :9                          \n     slum          \n Length:651        \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n```\n\n\n:::\n:::\n\n\n\n\nNote, if you have a very large dataset with 15+ variables, `summary()` is not so efficient. \n\n## Description of data\n\nThis is data based on a simulated pathogen X IgG antibody serological survey.  The rows represent individuals. Variables include IgG concentrations in IU/mL, age in years, gender, and residence based on slum characterization.  We will use this dataset for modules throughout the Workshop.\n\n## View the data as a whole dataframe\n\nThe `View()` function, one of the few Base R functions with a capital letter, and can be used to open a new tab in the Console and view the data as you would in excel.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(df)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/ViewTab.png){width=100%}\n:::\n:::\n\n\n\n\n## View the data as a whole dataframe\n\nYou can also open a new tab of the data by clicking on the data icon beside the object in the Environment pane\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/View.png){width=90%}\n:::\n:::\n\n\n\n\nYou can also hold down `Cmd` or `CTRL` and click on the name of a data frame in your code.\n\n## Indexing\n\nR contains several operators which allow access to individual elements or subsets through indexing. Indexing can be used both to extract part of an object and to replace parts of an object (or to add parts). There are three basic indexing operators: `[`, `[[` and `$`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[i] #if x is a vector\nx[i, j] #if x is a matrix/data frame\nx[[i]] #if x is a list\nx$a #if x is a data frame or list\nx$\"a\" #if x is a data frame or list\n```\n:::\n\n\n\n\n## Vectors and multi-dimensional objects\n\nTo index a vector, `vector[i]` select the ith element. To index a multi-dimensional objects such as a matrix, `matrix[i, j]` selects the element in row i and column j, where as in a three dimensional `array[k, i, j]` selects the element in matrix k, row i, and column j. \n\nLet's practice by first creating the same objects as we did in Module 1.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumber.object <- 3\ncharacter.object <- \"blue\"\nvector.object1 <- c(2,3,4,5)\nvector.object2 <- c(\"blue\", \"red\", \"yellow\")\nmatrix.object <- matrix(data=vector.object1, nrow=2, ncol=2, byrow=TRUE)\n```\n:::\n\n\n\n\nHere is a reminder of what these objects look like.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector.object1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\nmatrix.object\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    2    3\n[2,]    4    5\n```\n\n\n:::\n:::\n\n\n\n\nFinally, let's use indexing to pull out elements of the objects.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector.object1[2] #pulling the second element\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nmatrix.object[1,2] #pulling the element in row 1 column 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n\n## List objects\n\nFor lists, one generally uses `list[[p]]` to select any single element p.\n\nLet's practice by creating the same list as we did in Module 1.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.object <- list(number.object, vector.object2, matrix.object)\nlist.object\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 3\n\n[[2]]\n[1] \"blue\"   \"red\"    \"yellow\"\n\n[[3]]\n     [,1] [,2]\n[1,]    2    3\n[2,]    4    5\n```\n\n\n:::\n:::\n\n\n\n\nNow we use indexing to pull out the 3rd element in the list.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.object[[3]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    2    3\n[2,]    4    5\n```\n\n\n:::\n:::\n\n\n\n\nWhat happens if we use a single square bracket?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.object[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n     [,1] [,2]\n[1,]    2    3\n[2,]    4    5\n```\n\n\n:::\n:::\n\n\n\n\nThe `[[` operator is called the \"extract\" operator and gives us the element\nfrom the list. The `[` operator is called the \"subset\" operator and gives\nus a subset of the list, that is still a list.\n\n## $ for indexing for data frame\n\n`$` allows only a literal character string or a symbol as the index.  For a data frame it extracts a variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$IgG_concentration\n```\n:::\n\n\n\n\nNote, if you have spaces in your variable name, you will need to use back ticks \\` after the `$`.  This is a good reason to not create variables / column names with spaces.\n\n## $ for indexing with lists\n\n`$` allows only a literal character string or a symbol as the index.  For a list it extracts a named element.\n\nList elements can be named\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.object.named <- list(\n  emory = number.object,\n  uga = vector.object2,\n  gsu = matrix.object\n)\nlist.object.named\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$emory\n[1] 3\n\n$uga\n[1] \"blue\"   \"red\"    \"yellow\"\n\n$gsu\n     [,1] [,2]\n[1,]    2    3\n[2,]    4    5\n```\n\n\n:::\n:::\n\n\n\n\nIf list elements are named, than you can reference data from list using `$` or using double square brackets, `[[`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.object.named$uga \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"blue\"   \"red\"    \"yellow\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlist.object.named[[\"uga\"]] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"blue\"   \"red\"    \"yellow\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Using indexing to rename columns\n\nAs mentioned above, indexing can be used both to extract part of an object and to replace parts of an object (or to add parts).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"observation_id\"    \"IgG_concentration\" \"age\"              \n[4] \"gender\"            \"slum\"             \n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(df)[2:3] <- c(\"IgG_concentration_IU/mL\", \"age_year\") # reassigns\ncolnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"observation_id\"          \"IgG_concentration_IU/mL\"\n[3] \"age_year\"                \"gender\"                 \n[5] \"slum\"                   \n```\n\n\n:::\n:::\n\n\n\n\n</br>\n\nFor the sake of the module, I am going to reassign them back to the original variable names\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)[2:3] <- c(\"IgG_concentration\", \"age\") #reset\n```\n:::\n\n\n\n\n##  Using indexing to subset by columns\n\nWe can also subset data frames and matrices (2-dimensional objects) using the bracket `[ row , column ]`.  We can subset by columns and pull the `x` column using the index of the column or the column name. Leaving either row or column dimension blank means to select all of them.\n\nFor example, here I am pulling the 3rd column, which has the variable name `age`, for all of rows.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf[ , \"age\"] #same as df[ , 3]\n```\n:::\n\n\n\nWe can select multiple columns using multiple column names, again this is selecting these variables for all of the rows.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf[, c(\"age\", \"gender\")] #same as df[ , c(3,4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    age gender\n1     2 Female\n2     4 Female\n3     4   Male\n4     4   Male\n5     1   Male\n6     4   Male\n7     4 Female\n8    NA Female\n9     4   Male\n10    2   Male\n11    3   Male\n12   15 Female\n13    8   Male\n14   12   Male\n15   15   Male\n16    9   Male\n17    8   Male\n18    7 Female\n19   11 Female\n20   10   Male\n21    8   Male\n22   11 Female\n23    2   Male\n24    2 Female\n25    3 Female\n26    5   Male\n27    1   Male\n28    3 Female\n29    5 Female\n30    5 Female\n31    3   Male\n32    1   Male\n33    4 Female\n34    3   Male\n35    2 Female\n36   11 Female\n37    7   Male\n38    8   Male\n39    6   Male\n40    6   Male\n41   11 Female\n42   10   Male\n43    6 Female\n44   12   Male\n45   11   Male\n46   10   Male\n47   11   Male\n48   13 Female\n49    3 Female\n50    4 Female\n51    3   Male\n52    1   Male\n53    2 Female\n54    2 Female\n55    4   Male\n56    2   Male\n57    2   Male\n58    3 Female\n59    3 Female\n60    4   Male\n61    1 Female\n62   13 Female\n63   13 Female\n64    6   Male\n65   13   Male\n66    5 Female\n67   13 Female\n68   14   Male\n69   13   Male\n70    8 Female\n71    7   Male\n72    6 Female\n73   13   Male\n74    3   Male\n75    4   Male\n76    2   Male\n77   NA   Male\n78    5 Female\n79    3   Male\n80    3   Male\n81   14   Male\n82   11 Female\n83    7 Female\n84    7   Male\n85   11 Female\n86    9 Female\n87   14   Male\n88   13 Female\n89    1   Male\n90    1   Male\n91    4   Male\n92    1 Female\n93    2   Male\n94    3 Female\n95    2   Male\n96    1   Male\n97    2   Male\n98    2 Female\n99    4 Female\n100   5 Female\n101   5   Male\n102   6 Female\n103  14 Female\n104  14   Male\n105  10   Male\n106   6 Female\n107   6   Male\n108   8   Male\n109   6 Female\n110  12 Female\n111  12   Male\n112  14 Female\n113  15   Male\n114  12 Female\n115   4 Female\n116   4   Male\n117   3 Female\n118  NA   Male\n119   2 Female\n120   3   Male\n121  NA Female\n122   3 Female\n123   3   Male\n124   2 Female\n125   4 Female\n126  10 Female\n127   7 Female\n128  11 Female\n129   6 Female\n130  11   Male\n131   9   Male\n132   6   Male\n133  13 Female\n134  10 Female\n135   6 Female\n136  11 Female\n137   7   Male\n138   6 Female\n139   4 Female\n140   4 Female\n141   4   Male\n142   4 Female\n143   4   Male\n144   4   Male\n145   3   Male\n146   4 Female\n147   3   Male\n148   3   Male\n149  13 Female\n150   7 Female\n151  10   Male\n152   6   Male\n153  10 Female\n154  12 Female\n155  10   Male\n156  10   Male\n157  13   Male\n158  13 Female\n159   5 Female\n160   3 Female\n161   4   Male\n162   1   Male\n163   3 Female\n164   4   Male\n165   4   Male\n166   1   Male\n167   5 Female\n168   6 Female\n169  14 Female\n170   6   Male\n171  13 Female\n172   9   Male\n173  11   Male\n174  10   Male\n175   5 Female\n176  14   Male\n177   7   Male\n178  10   Male\n179   6   Male\n180   5   Male\n181   3 Female\n182   4   Male\n183   2 Female\n184   3   Male\n185   3 Female\n186   2 Female\n187   3   Male\n188   5 Female\n189   2   Male\n190   3 Female\n191  14 Female\n192   9 Female\n193  14 Female\n194   9 Female\n195   8 Female\n196   7   Male\n197  13   Male\n198   8 Female\n199   6   Male\n200  12 Female\n201  14 Female\n202  15 Female\n203   2 Female\n204   4 Female\n205   3   Male\n206   3 Female\n207   3   Male\n208   4 Female\n209   3   Male\n210  14 Female\n211   8   Male\n212   7   Male\n213  14 Female\n214  13 Female\n215  13 Female\n216   7   Male\n217   8 Female\n218  10 Female\n219   9   Male\n220   9 Female\n221   3 Female\n222   4   Male\n223   4 Female\n224   4   Male\n225   2 Female\n226   1 Female\n227   3 Female\n228   2   Male\n229   3   Male\n230   5   Male\n231   2 Female\n232   2   Male\n233   9   Male\n234  13   Male\n235  10 Female\n236   6   Male\n237  13 Female\n238  11   Male\n239  10   Male\n240   8 Female\n241   9 Female\n242  10   Male\n243  14   Male\n244   1 Female\n245   2   Male\n246   3 Female\n247   2   Male\n248   3 Female\n249   2 Female\n250   3 Female\n251   5 Female\n252  10 Female\n253   7   Male\n254  13 Female\n255  15   Male\n256  11 Female\n257  10 Female\n258   3 Female\n259   2   Male\n260   3   Male\n261   3 Female\n262   3 Female\n263   4   Male\n264   3   Male\n265   2   Male\n266   4   Male\n267   2 Female\n268   8   Male\n269  11   Male\n270   6   Male\n271  14 Female\n272  14   Male\n273   5 Female\n274   5   Male\n275  10 Female\n276  13   Male\n277   6   Male\n278   5   Male\n279  12   Male\n280   2   Male\n281   3 Female\n282   1 Female\n283   1   Male\n284   1 Female\n285   2 Female\n286   5 Female\n287   5   Male\n288   4 Female\n289   2   Male\n290  NA Female\n291   6 Female\n292   8   Male\n293  15   Male\n294  11   Male\n295  14   Male\n296   6   Male\n297  10 Female\n298  12   Male\n299  14   Male\n300  10   Male\n301   1 Female\n302   3   Male\n303   2   Male\n304   3 Female\n305   4   Male\n306   3   Male\n307   4 Female\n308   4   Male\n309   1 Female\n310   7   Male\n311  11 Female\n312   7 Female\n313   5 Female\n314  10   Male\n315   9 Female\n316  13   Male\n317  11 Female\n318  13   Male\n319   9 Female\n320  15 Female\n321   7 Female\n322   4   Male\n323   1   Male\n324   1   Male\n325   2 Female\n326   2 Female\n327   3   Male\n328   2   Male\n329   3   Male\n330   4 Female\n331   7 Female\n332  11 Female\n333  10 Female\n334   5   Male\n335   8   Male\n336  15   Male\n337  14   Male\n338   2   Male\n339   2 Female\n340   2   Male\n341   5   Male\n342   4 Female\n343   3   Male\n344   5 Female\n345   4 Female\n346   2 Female\n347   1 Female\n348   7   Male\n349   8 Female\n350  NA   Male\n351   9   Male\n352   8 Female\n353   5   Male\n354  14   Male\n355  14   Male\n356   7 Female\n357  13 Female\n358   2   Male\n359   1 Female\n360   1   Male\n361   4 Female\n362   3   Male\n363   4 Female\n364   3   Male\n365   1   Male\n366   5 Female\n367   4 Female\n368   4 Female\n369   4   Male\n370  11   Male\n371  15 Female\n372  12 Female\n373  11 Female\n374   8 Female\n375  13   Male\n376  10 Female\n377  10 Female\n378  15   Male\n379   8 Female\n380  14   Male\n381   4   Male\n382   1   Male\n383   5 Female\n384   2   Male\n385   2 Female\n386   4   Male\n387   4   Male\n388   2 Female\n389   3   Male\n390  11   Male\n391  10 Female\n392   6   Male\n393  12 Female\n394  10 Female\n395   8   Male\n396   8   Male\n397  13   Male\n398  10   Male\n399  13 Female\n400  10   Male\n401   2   Male\n402   4 Female\n403   3 Female\n404   2 Female\n405   1 Female\n406   3   Male\n407   3 Female\n408   4   Male\n409   5 Female\n410   5 Female\n411   1 Female\n412  11   Male\n413   6   Male\n414  14 Female\n415   8   Male\n416   8 Female\n417   9 Female\n418   7   Male\n419   6   Male\n420  12 Female\n421   8   Male\n422  11 Female\n423  14   Male\n424   3 Female\n425   1 Female\n426   5 Female\n427   2 Female\n428   3 Female\n429   4 Female\n430   2   Male\n431   3 Female\n432   4   Male\n433   1 Female\n434   7 Female\n435  10   Male\n436  11   Male\n437   7 Female\n438  10 Female\n439  14 Female\n440   7 Female\n441  11   Male\n442  12   Male\n443  10 Female\n444   6   Male\n445  13   Male\n446   8 Female\n447   2   Male\n448   3 Female\n449   1 Female\n450   2 Female\n451  NA   Male\n452  NA Female\n453   4   Male\n454   4   Male\n455   1   Male\n456   2 Female\n457   2   Male\n458  12   Male\n459  12 Female\n460   8 Female\n461  14 Female\n462  13 Female\n463   6   Male\n464  11 Female\n465  11   Male\n466  10 Female\n467  12   Male\n468  14 Female\n469  11 Female\n470   1   Male\n471   2 Female\n472   3   Male\n473   3 Female\n474   5 Female\n475   3   Male\n476   1   Male\n477   4 Female\n478   4 Female\n479   4   Male\n480   2 Female\n481   5 Female\n482   7   Male\n483   8   Male\n484  10   Male\n485   6 Female\n486   7   Male\n487  10 Female\n488   6   Male\n489   6 Female\n490  15 Female\n491   5   Male\n492   3   Male\n493   5   Male\n494   3 Female\n495   5   Male\n496   5   Male\n497   1 Female\n498   1   Male\n499   7 Female\n500  14 Female\n501   9   Male\n502  10 Female\n503  10 Female\n504  11   Male\n505  11 Female\n506  12 Female\n507  11 Female\n508  12   Male\n509  12   Male\n510  10 Female\n511   1   Male\n512   2 Female\n513   4   Male\n514   2   Male\n515   3   Male\n516   3 Female\n517   2   Male\n518   4   Male\n519   3   Male\n520   1 Female\n521   4   Male\n522  12 Female\n523   6   Male\n524   7 Female\n525   7   Male\n526  13 Female\n527   8 Female\n528   7   Male\n529   8 Female\n530   8 Female\n531  11 Female\n532  14 Female\n533   3   Male\n534   2 Female\n535   2   Male\n536   3   Male\n537   2   Male\n538   2 Female\n539   3 Female\n540   2   Male\n541   5   Male\n542  10 Female\n543  14   Male\n544   9   Male\n545   6   Male\n546   7   Male\n547  14 Female\n548   7 Female\n549   7   Male\n550   9   Male\n551  14   Male\n552  10 Female\n553  13 Female\n554   5   Male\n555   4 Female\n556   4 Female\n557   5 Female\n558   4 Female\n559   4   Male\n560   4   Male\n561   3 Female\n562   1 Female\n563   4   Male\n564   1   Male\n565   1 Female\n566   7   Male\n567  13 Female\n568  10 Female\n569  14   Male\n570  12 Female\n571  14   Male\n572   8   Male\n573   7   Male\n574  11 Female\n575   8   Male\n576  12   Male\n577   9 Female\n578   5 Female\n579   4   Male\n580   3 Female\n581   2   Male\n582   2   Male\n583   3   Male\n584   4 Female\n585   4   Male\n586   4 Female\n587   5   Male\n588   3 Female\n589   6 Female\n590   3   Male\n591  11 Female\n592  11   Male\n593   7   Male\n594   8   Male\n595   6 Female\n596  10 Female\n597   8 Female\n598   8   Male\n599   9 Female\n600   8   Male\n601  13   Male\n602  11   Male\n603   8 Female\n604   2 Female\n605   4   Male\n606   2   Male\n607   2 Female\n608   4   Male\n609   2   Male\n610   4 Female\n611   2 Female\n612   4 Female\n613   1 Female\n614   4 Female\n615  12 Female\n616   7 Female\n617  11   Male\n618   6   Male\n619   8   Male\n620  14   Male\n621  11   Male\n622   7 Female\n623  14 Female\n624   6   Male\n625  13 Female\n626  13 Female\n627   3   Male\n628   1   Male\n629   3   Male\n630   1 Female\n631   1 Female\n632   2   Male\n633   4   Male\n634   4   Male\n635   2 Female\n636   4 Female\n637   5   Male\n638   3 Female\n639   3   Male\n640   6 Female\n641  11 Female\n642   9 Female\n643   7 Female\n644   8   Male\n645  NA Female\n646   8 Female\n647  14 Female\n648  10   Male\n649  10   Male\n650  11 Female\n651  13 Female\n```\n\n\n:::\n:::\n\n\n\nWe can remove select columns using indexing as well, OR by simply changing the column to `NULL`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf[, -5] #remove column 5, \"slum\" variable\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$slum <- NULL # this is the same as above\n```\n:::\n\n\n\nWe can also grab the `age` column using the `$` operator, again this is selecting the variable for all of the rows.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$age\n```\n:::\n\n\n\n\n\n##  Using indexing to subset by rows\n\nWe can use indexing to also subset by rows. For example, here we pull the 100th observation/row.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf[100,] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    observation_id IgG_concentration age gender     slum\n100           8122         0.1818182   5 Female Non slum\n```\n\n\n:::\n:::\n\n\n\nAnd, here we pull the `age` of the 100th observation/row.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf[100,\"age\"] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n\n \n\n## Logical operators\n\nLogical operators can be evaluated on object(s) in order to return a binary response of TRUE/FALSE\n\noperator | operator option |description\n-----|-----|-----:\n`<`|%l%|less than\n`<=`|%le%|less than or equal to\n`>`|%g%|greater than\n`>=`|%ge%|greater than or equal to\n`==`||equal to\n`!=`||not equal to\n`x&y`||x and y\n`x|y`||x or y\n`%in%`||match\n`%!in%`||do not match\n\n\n## Logical operators examples\n\nLet's practice.  First, here is a reminder of what the number.object contains.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumber.object\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\nNow, we will use logical operators to evaluate the object.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumber.object<4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nnumber.object>=3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nnumber.object!=5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nnumber.object %in% c(6,7,2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\nWe can use any of these logical operators to subset our data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Overall mean\nmean(df$IgG_concentration, na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 87.36826\n```\n\n\n:::\n\n```{.r .cell-code}\n# Mean for all children who are not age 3\nmean(df$IgG_concentration[df$age != 3], na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 90.32824\n```\n\n\n:::\n\n```{.r .cell-code}\n# Mean for all children who are between 0 and 3 or between 7 and 10 years old\nmean(df$IgG_concentration[df$age %in% c(0:3, 7:10)], na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 74.0914\n```\n\n\n:::\n:::\n\n\n\n\n## Using indexing and logical operators to rename columns\n\n1. We can assign the column names from data frame `df` to an object `cn`, then we can modify `cn` directly using indexing and logical operators, finally we reassign the column names, `cn`, back to the data frame `df`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncn <- colnames(df)\ncn\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"observation_id\"    \"IgG_concentration\" \"age\"              \n[4] \"gender\"            \"slum\"             \n```\n\n\n:::\n\n```{.r .cell-code}\ncn==\"IgG_concentration\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE FALSE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\ncn[cn==\"IgG_concentration\"] <-\"IgG_concentration_IU/mL\" #rename cn to \"IgG_concentration_IU\" when cn is \"IgG_concentration\"\ncolnames(df) <- cn\ncolnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"observation_id\"          \"IgG_concentration_IU/mL\"\n[3] \"age\"                     \"gender\"                 \n[5] \"slum\"                   \n```\n\n\n:::\n:::\n\n\n\n\n</br>\n\nNote, I am resetting the column name back to the original name for the sake of the rest of the module.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)[colnames(df)==\"IgG_concentration_IU/mL\"] <- \"IgG_concentration\" #reset\n```\n:::\n\n\n\n\n\n##  Using indexing and logical operators to subset data\n\n\nIn this example, we subset by rows and pull only observations with an age of less than or equal to 10 and then saved the subset data to `df_lt10`. Note that the logical operators `df$age<=10` is before the comma because I want to subset by rows (the first dimension).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_lte10 <- df[df$age<=10, ]\n```\n:::\n\n\n\nLets check that my subsets worked using the `summary()` function. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df_lte10$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n    1.0     3.0     4.0     4.8     7.0    10.0       9 \n```\n\n\n:::\n:::\n\n\n\n\n</br>\n\nIn the next example, we subset by rows and pull only observations with an age of less than or equal to 5 OR greater than 10.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_lte5_gt10 <- df[df$age<=5 | df$age>10, ]\n```\n:::\n\n\n\nLets check that my subsets worked using the `summary()` function. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df_lte5_gt10$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   1.00    2.50    4.00    6.08   11.00   15.00       9 \n```\n\n\n:::\n:::\n\n\n\n\n\n## Missing values \n\nMissing data need to be carefully described and dealt with in data analysis. Understanding the different types of missing data and how you can identify them, is the first step to data cleaning.\n\nTypes of \"missing\" values:\n\n- `NA` - **N**ot **A**pplicable general missing data\n- `NaN` - stands for \"**N**ot **a** **N**umber\", happens when you do 0/0.\n- `Inf` and `-Inf` - Infinity, happens when you divide a positive number (or negative number) by 0.\n- blank space - sometimes when data is read it, there is a blank space left\n- an empty string (e.g., `\"\"`) \n- `NULL`- undefined value that represents something that does not exist\n\n## Logical operators to help identify and missing data\n\noperator |description\n-----|-----|-----:\n`is.na`|is NAN or NA\n`is.nan`|is NAN\n`!is.na`|is not NAN or NA\n`!is.nan`|is not NAN\n`is.infinite`|is infinite\n`any`|are any TRUE\n`all`|all are TRUE\n`which`|which are TRUE\n\n## More logical operators examples\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest <- c(0,NA, -1)/0\ntest\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  NaN   NA -Inf\n```\n\n\n:::\n\n```{.r .cell-code}\nis.na(test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE  TRUE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nis.nan(test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nis.infinite(test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE\n```\n\n\n:::\n:::\n\n\n\n\n## More logical operators examples\n\n`any(is.na(x))` means do we have any `NA`'s in the object `x`?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(is.na(df$IgG_concentration)) # are there any NAs - YES/TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nany(is.na(df$slum)) # are there any NAs- NO/FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\n`which(is.na(x))` means which of the elements in object `x` are `NA`'s?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich(is.na(df$IgG_concentration)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  13  55  57  72 182 406 414 478 488 595\n```\n\n\n:::\n\n```{.r .cell-code}\nwhich(is.na(df$slum)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ninteger(0)\n```\n\n\n:::\n:::\n\n\n\n\n## `subset()` function\n\nThe Base R `subset()` function is a slightly easier way to select variables and observations.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?subset\n```\n:::\n\n\n```\nRegistered S3 method overwritten by 'printr':\n  method                from     \n  knit_print.data.frame rmarkdown\n```\n\nSubsetting Vectors, Matrices and Data Frames\n\nDescription:\n\n     Return subsets of vectors, matrices or data frames which meet\n     conditions.\n\nUsage:\n\n     subset(x, ...)\n     \n     ## Default S3 method:\n     subset(x, subset, ...)\n     \n     ## S3 method for class 'matrix'\n     subset(x, subset, select, drop = FALSE, ...)\n     \n     ## S3 method for class 'data.frame'\n     subset(x, subset, select, drop = FALSE, ...)\n     \nArguments:\n\n       x: object to be subsetted.\n\n  subset: logical expression indicating elements or rows to keep:\n          missing values are taken as false.\n\n  select: expression, indicating columns to select from a data frame.\n\n    drop: passed on to '[' indexing operator.\n\n     ...: further arguments to be passed to or from other methods.\n\nDetails:\n\n     This is a generic function, with methods supplied for matrices,\n     data frames and vectors (including lists).  Packages and users can\n     add further methods.\n\n     For ordinary vectors, the result is simply 'x[subset &\n     !is.na(subset)]'.\n\n     For data frames, the 'subset' argument works on the rows.  Note\n     that 'subset' will be evaluated in the data frame, so columns can\n     be referred to (by name) as variables in the expression (see the\n     examples).\n\n     The 'select' argument exists only for the methods for data frames\n     and matrices.  It works by first replacing column names in the\n     selection expression with the corresponding column numbers in the\n     data frame and then using the resulting integer vector to index\n     the columns.  This allows the use of the standard indexing\n     conventions so that for example ranges of columns can be specified\n     easily, or single columns can be dropped (see the examples).\n\n     The 'drop' argument is passed on to the indexing method for\n     matrices and data frames: note that the default for matrices is\n     different from that for indexing.\n\n     Factors may have empty levels after subsetting; unused levels are\n     not automatically removed.  See 'droplevels' for a way to drop all\n     unused levels from a data frame.\n\nValue:\n\n     An object similar to 'x' contain just the selected elements (for a\n     vector), rows and columns (for a matrix or data frame), and so on.\n\nWarning:\n\n     This is a convenience function intended for use interactively.\n     For programming it is better to use the standard subsetting\n     functions like '[', and in particular the non-standard evaluation\n     of argument 'subset' can have unanticipated consequences.\n\nAuthor(s):\n\n     Peter Dalgaard and Brian Ripley\n\nSee Also:\n\n     '[', 'transform' 'droplevels'\n\nExamples:\n\n     subset(airquality, Temp > 80, select = c(Ozone, Temp))\n     subset(airquality, Day == 1, select = -Temp)\n     subset(airquality, select = Ozone:Wind)\n     \n     with(airquality, subset(Ozone, Temp > 80))\n     \n     ## sometimes requiring a logical 'subset' argument is a nuisance\n     nm <- rownames(state.x77)\n     start_with_M <- nm %in% grep(\"^M\", nm, value = TRUE)\n     subset(state.x77, start_with_M, Illiteracy:Murder)\n     # but in recent versions of R this can simply be\n     subset(state.x77, grepl(\"^M\", nm), Illiteracy:Murder)\n\n\n\n\n## Subsetting use the `subset()` function\n\nHere are a few examples using the `subset()` function\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_lte10_v2 <- subset(df, df$age<=10, select=c(IgG_concentration, age))\ndf_lt5_f <- subset(df, df$age<=5 & gender==\"Female\", select=c(IgG_concentration, slum))\n```\n:::\n\n\n\n\n## `subset()` function vs logical operators\n\n`subset()` automatically removes NAs, which is a different behavior from doing logical operations on NAs.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df_lte10$age) #created with indexing\n```\n\n::: {.cell-output-display}\n\n\n| Min.| 1st Qu.| Median| Mean| 3rd Qu.| Max.| NA's|\n|----:|-------:|------:|----:|-------:|----:|----:|\n|    1|       3|      4|  4.8|       7|   10|    9|\n:::\n\n```{.r .cell-code}\nsummary(df_lte10_v2$age) #created with the subset function\n```\n\n::: {.cell-output-display}\n\n\n| Min.| 1st Qu.| Median| Mean| 3rd Qu.| Max.|\n|----:|-------:|------:|----:|-------:|----:|\n|    1|       3|      4|  4.8|       7|   10|\n:::\n:::\n\n\n\n\nWe can also see this by looking at the number or rows in each dataset.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(df_lte10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 504\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(df_lte10_v2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 495\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Summary\n\n- `colnames()`, `str()` and `summary()`functions from Base R are functions to assess the data type and some summary statistics\n- There are three basic indexing syntax: `[`, `[[` and `$`\n- Indexing can be used to extract part of an object (e.g., subset data) and to replace parts of an object (e.g., rename variables / columns)\n- Logical operators can be evaluated on object(s) in order to return a binary response of TRUE/FALSE, and are useful for decision rules for indexing\n- There are 7 “types” of missing values, the most common being “NA”\n- Logical operators meant to determine missing values are very helpful for data cleaning\n- The Base R `subset()` function is a slightly easier way to select variables and observations.\n\n## Acknowledgements\n\nThese are the materials we looked through, modified, or extracted to complete this module's lecture.\n\n-   [\"Introduction to R for Public Health Researchers\" Johns Hopkins University](https://jhudatascience.org/intro_to_r/)\n-   [\"Indexing\" CRAN Project](https://cran.r-project.org/doc/manuals/R-lang.html#Indexing)\n-   [\"Logical operators\" CRAN Project](https://cran.r-project.org/web/packages/extraoperators/vignettes/logicals-vignette.html)\n\n",
    "supporting": [
      "Module06-DataSubset_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}